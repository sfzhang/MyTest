// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mrgfus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mrgfus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SESeq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SESeq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRESeq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRESeq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MRStatusQueryPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MRStatusQueryPb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MRStatusQueryPb_MRStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MRStatusNotifyPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MRStatusNotifyPb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MRStatusNotifyPb_MRStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ManuScanPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManuScanPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoScanPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoScanPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImgXferPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImgXferPb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImgXferPb_ImageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MRgFUSPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MRgFUSPb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MRgFUSPb_ProtoCateg_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExecResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SeqType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScanOrient_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FreqDirection_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mrgfus_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mrgfus_2eproto() {
  protobuf_AddDesc_mrgfus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mrgfus.proto");
  GOOGLE_CHECK(file != NULL);
  SESeq_descriptor_ = file->message_type(0);
  static const int SESeq_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, fov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, slice_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, slice_spacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, start_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, start_ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, start_is_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, end_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, end_ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, end_is_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, slices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, image_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, image_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, te_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, tr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, fa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, freq_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, phase_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, nex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, band_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, freq_dir_),
  };
  SESeq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SESeq_descriptor_,
      SESeq::internal_default_instance(),
      SESeq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, _has_bits_),
      -1,
      -1,
      sizeof(SESeq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SESeq, _internal_metadata_));
  GRESeq_descriptor_ = file->message_type(1);
  static const int GRESeq_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, thm_calc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, fov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, slice_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, slice_spacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, start_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, start_ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, start_is_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, end_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, end_ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, end_is_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, slices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, phases_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, image_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, image_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, thm_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, thm_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, thm_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, thm_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, thm_ref_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, thm_ref_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, thm_ref_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, thm_ref_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, te_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, tr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, fa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, freq_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, phase_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, nex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, band_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, freq_dir_),
  };
  GRESeq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GRESeq_descriptor_,
      GRESeq::internal_default_instance(),
      GRESeq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, _has_bits_),
      -1,
      -1,
      sizeof(GRESeq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRESeq, _internal_metadata_));
  MRStatusQueryPb_descriptor_ = file->message_type(2);
  static const int MRStatusQueryPb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRStatusQueryPb, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRStatusQueryPb, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRStatusQueryPb, status_),
  };
  MRStatusQueryPb_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MRStatusQueryPb_descriptor_,
      MRStatusQueryPb::internal_default_instance(),
      MRStatusQueryPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRStatusQueryPb, _has_bits_),
      -1,
      -1,
      sizeof(MRStatusQueryPb),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRStatusQueryPb, _internal_metadata_));
  MRStatusQueryPb_MRStatus_descriptor_ = MRStatusQueryPb_descriptor_->enum_type(0);
  MRStatusNotifyPb_descriptor_ = file->message_type(3);
  static const int MRStatusNotifyPb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRStatusNotifyPb, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRStatusNotifyPb, status_),
  };
  MRStatusNotifyPb_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MRStatusNotifyPb_descriptor_,
      MRStatusNotifyPb::internal_default_instance(),
      MRStatusNotifyPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRStatusNotifyPb, _has_bits_),
      -1,
      -1,
      sizeof(MRStatusNotifyPb),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRStatusNotifyPb, _internal_metadata_));
  MRStatusNotifyPb_MRStatus_descriptor_ = MRStatusNotifyPb_descriptor_->enum_type(0);
  ManuScanPb_descriptor_ = file->message_type(4);
  static const int ManuScanPb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManuScanPb, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManuScanPb, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManuScanPb, error_msg_),
  };
  ManuScanPb_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ManuScanPb_descriptor_,
      ManuScanPb::internal_default_instance(),
      ManuScanPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManuScanPb, _has_bits_),
      -1,
      -1,
      sizeof(ManuScanPb),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManuScanPb, _internal_metadata_));
  AutoScanPb_descriptor_ = file->message_type(5);
  static const int AutoScanPb_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoScanPb, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoScanPb, seq_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoScanPb, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoScanPb, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoScanPb, se_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoScanPb, gre_),
  };
  AutoScanPb_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AutoScanPb_descriptor_,
      AutoScanPb::internal_default_instance(),
      AutoScanPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoScanPb, _has_bits_),
      -1,
      -1,
      sizeof(AutoScanPb),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoScanPb, _internal_metadata_));
  ImgXferPb_descriptor_ = file->message_type(6);
  static const int ImgXferPb_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferPb, image_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferPb, thm_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferPb, thm_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferPb, thm_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferPb, thm_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferPb, thm_map_),
  };
  ImgXferPb_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImgXferPb_descriptor_,
      ImgXferPb::internal_default_instance(),
      ImgXferPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferPb, _has_bits_),
      -1,
      -1,
      sizeof(ImgXferPb),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferPb, _internal_metadata_));
  ImgXferPb_ImageType_descriptor_ = ImgXferPb_descriptor_->enum_type(0);
  MRgFUSPb_descriptor_ = file->message_type(7);
  static const int MRgFUSPb_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRgFUSPb, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRgFUSPb, msg_categ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRgFUSPb, mr_status_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRgFUSPb, mr_status_notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRgFUSPb, manu_scan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRgFUSPb, auto_scan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRgFUSPb, img_xfer_),
  };
  MRgFUSPb_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MRgFUSPb_descriptor_,
      MRgFUSPb::internal_default_instance(),
      MRgFUSPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRgFUSPb, _has_bits_),
      -1,
      -1,
      sizeof(MRgFUSPb),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRgFUSPb, _internal_metadata_));
  MRgFUSPb_ProtoCateg_descriptor_ = MRgFUSPb_descriptor_->enum_type(0);
  MsgType_descriptor_ = file->enum_type(0);
  ExecResult_descriptor_ = file->enum_type(1);
  SeqType_descriptor_ = file->enum_type(2);
  ScanOrient_descriptor_ = file->enum_type(3);
  FreqDirection_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mrgfus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SESeq_descriptor_, SESeq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GRESeq_descriptor_, GRESeq::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MRStatusQueryPb_descriptor_, MRStatusQueryPb::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MRStatusNotifyPb_descriptor_, MRStatusNotifyPb::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ManuScanPb_descriptor_, ManuScanPb::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AutoScanPb_descriptor_, AutoScanPb::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImgXferPb_descriptor_, ImgXferPb::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MRgFUSPb_descriptor_, MRgFUSPb::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mrgfus_2eproto() {
  SESeq_default_instance_.Shutdown();
  delete SESeq_reflection_;
  GRESeq_default_instance_.Shutdown();
  delete GRESeq_reflection_;
  MRStatusQueryPb_default_instance_.Shutdown();
  delete MRStatusQueryPb_reflection_;
  MRStatusNotifyPb_default_instance_.Shutdown();
  delete MRStatusNotifyPb_reflection_;
  ManuScanPb_default_instance_.Shutdown();
  delete ManuScanPb_reflection_;
  AutoScanPb_default_instance_.Shutdown();
  delete AutoScanPb_reflection_;
  ImgXferPb_default_instance_.Shutdown();
  delete ImgXferPb_reflection_;
  MRgFUSPb_default_instance_.Shutdown();
  delete MRgFUSPb_reflection_;
}

void protobuf_InitDefaults_mrgfus_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  SESeq_default_instance_.DefaultConstruct();
  GRESeq_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MRStatusQueryPb_default_instance_.DefaultConstruct();
  MRStatusNotifyPb_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ManuScanPb_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AutoScanPb_default_instance_.DefaultConstruct();
  ImgXferPb_default_instance_.DefaultConstruct();
  MRgFUSPb_default_instance_.DefaultConstruct();
  SESeq_default_instance_.get_mutable()->InitAsDefaultInstance();
  GRESeq_default_instance_.get_mutable()->InitAsDefaultInstance();
  MRStatusQueryPb_default_instance_.get_mutable()->InitAsDefaultInstance();
  MRStatusNotifyPb_default_instance_.get_mutable()->InitAsDefaultInstance();
  ManuScanPb_default_instance_.get_mutable()->InitAsDefaultInstance();
  AutoScanPb_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImgXferPb_default_instance_.get_mutable()->InitAsDefaultInstance();
  MRgFUSPb_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_mrgfus_2eproto_once_);
void protobuf_InitDefaults_mrgfus_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_mrgfus_2eproto_once_,
                 &protobuf_InitDefaults_mrgfus_2eproto_impl);
}
void protobuf_AddDesc_mrgfus_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_mrgfus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014mrgfus.proto\"\235\003\n\005SESeq\022 \n\013orientation\030"
    "\001 \002(\0162\013.ScanOrient\022\013\n\003fov\030\002 \002(\r\022\027\n\017slice"
    "_thickness\030\003 \002(\001\022\025\n\rslice_spacing\030\004 \002(\001\022"
    "\020\n\010start_rl\030\005 \002(\001\022\020\n\010start_ap\030\006 \002(\001\022\020\n\010s"
    "tart_is\030\007 \002(\001\022\016\n\006end_rl\030\010 \002(\001\022\016\n\006end_ap\030"
    "\t \002(\001\022\016\n\006end_is\030\n \002(\001\022\016\n\006slices\030\013 \002(\r\022\024\n"
    "\014image_height\030\014 \002(\r\022\023\n\013image_width\030\r \002(\r"
    "\022\n\n\002te\030\016 \001(\r\022\n\n\002tr\030\017 \001(\r\022\n\n\002fa\030\020 \001(\r\022\025\n\r"
    "freq_encoding\030\021 \001(\r\022\026\n\016phase_encoding\030\022 "
    "\001(\r\022\013\n\003nex\030\023 \001(\001\022\022\n\nband_width\030\024 \001(\001\022 \n\010"
    "freq_dir\030\025 \001(\0162\016.FreqDirection\"\351\004\n\006GRESe"
    "q\022\020\n\010thm_calc\030\001 \002(\010\022 \n\013orientation\030\002 \002(\016"
    "2\013.ScanOrient\022\013\n\003fov\030\003 \002(\r\022\027\n\017slice_thic"
    "kness\030\004 \002(\001\022\025\n\rslice_spacing\030\005 \002(\001\022\020\n\010st"
    "art_rl\030\006 \002(\001\022\020\n\010start_ap\030\007 \002(\001\022\020\n\010start_"
    "is\030\010 \002(\001\022\016\n\006end_rl\030\t \002(\001\022\016\n\006end_ap\030\n \002(\001"
    "\022\016\n\006end_is\030\013 \002(\001\022\016\n\006slices\030\014 \002(\r\022\016\n\006phas"
    "es\030\r \002(\r\022\r\n\005delay\030\016 \002(\001\022\024\n\014image_height\030"
    "\017 \002(\r\022\023\n\013image_width\030\020 \002(\r\022\r\n\005thm_x\030\021 \001("
    "\r\022\r\n\005thm_y\030\022 \001(\r\022\022\n\nthm_height\030\023 \001(\r\022\021\n\t"
    "thm_width\030\024 \001(\r\022\021\n\tthm_ref_x\030\025 \001(\r\022\021\n\tth"
    "m_ref_y\030\026 \001(\r\022\026\n\016thm_ref_height\030\027 \001(\r\022\025\n"
    "\rthm_ref_width\030\030 \001(\r\022\n\n\002te\030\031 \001(\r\022\n\n\002tr\030\032"
    " \001(\r\022\n\n\002fa\030\033 \001(\r\022\025\n\rfreq_encoding\030\034 \001(\r\022"
    "\026\n\016phase_encoding\030\035 \001(\r\022\013\n\003nex\030\036 \001(\001\022\022\n\n"
    "band_width\030\037 \001(\001\022 \n\010freq_dir\030  \001(\0162\016.Fre"
    "qDirection\"\221\001\n\017MRStatusQueryPb\022\032\n\010msg_ty"
    "pe\030\001 \002(\0162\010.MsgType\022\021\n\tdate_time\030\002 \002(\t\022)\n"
    "\006status\030\003 \001(\0162\031.MRStatusQueryPb.MRStatus"
    "\"$\n\010MRStatus\022\n\n\006NORMAL\020\001\022\014\n\010ABNORMAL\020\002\"\210"
    "\001\n\020MRStatusNotifyPb\022\032\n\010msg_type\030\001 \002(\0162\010."
    "MsgType\022*\n\006status\030\002 \001(\0162\032.MRStatusNotify"
    "Pb.MRStatus\",\n\010MRStatus\022\014\n\010ABNORMAL\020\001\022\022\n"
    "\016SCAN_INTERRUPT\020\002\"X\n\nManuScanPb\022\032\n\010msg_t"
    "ype\030\001 \002(\0162\010.MsgType\022\033\n\006result\030\002 \001(\0162\013.Ex"
    "ecResult\022\021\n\terror_msg\030\003 \001(\t\"\236\001\n\nAutoScan"
    "Pb\022\032\n\010msg_type\030\001 \002(\0162\010.MsgType\022\032\n\010seq_ty"
    "pe\030\002 \001(\0162\010.SeqType\022\033\n\006result\030\003 \001(\0162\013.Exe"
    "cResult\022\021\n\terror_msg\030\004 \001(\t\022\022\n\002se\030\005 \001(\0132\006"
    ".SESeq\022\024\n\003gre\030\006 \001(\0132\007.GRESeq\"\262\001\n\tImgXfer"
    "Pb\022(\n\nimage_type\030\001 \002(\0162\024.ImgXferPb.Image"
    "Type\022\r\n\005thm_x\030\002 \001(\r\022\r\n\005thm_y\030\003 \001(\r\022\022\n\nth"
    "m_height\030\004 \001(\r\022\021\n\tthm_width\030\005 \001(\r\022\017\n\007thm"
    "_map\030\006 \003(\001\"%\n\tImageType\022\r\n\tNON_THERM\020\001\022\t"
    "\n\005THERM\020\002\"\336\002\n\010MRgFUSPb\022\016\n\006msg_id\030\001 \002(\r\022\'"
    "\n\tmsg_categ\030\002 \002(\0162\024.MRgFUSPb.ProtoCateg\022"
    ")\n\017mr_status_query\030\003 \001(\0132\020.MRStatusQuery"
    "Pb\022+\n\020mr_status_notify\030\004 \001(\0132\021.MRStatusN"
    "otifyPb\022\036\n\tmanu_scan\030\005 \001(\0132\013.ManuScanPb\022"
    "\036\n\tauto_scan\030\006 \001(\0132\013.AutoScanPb\022\034\n\010img_x"
    "fer\030\007 \001(\0132\n.ImgXferPb\"c\n\nProtoCateg\022\023\n\017M"
    "R_STATUS_QUERY\020\001\022\024\n\020MR_STATUS_NOTIFY\020\002\022\r"
    "\n\tMANU_SCAN\020\003\022\r\n\tAUTO_SCAN\020\004\022\014\n\010IMG_XFER"
    "\020\005*\033\n\007MsgType\022\007\n\003REQ\020\001\022\007\n\003RSP\020\002*#\n\nExecR"
    "esult\022\013\n\007SUCCESS\020\001\022\010\n\004FAIL\020\002*\032\n\007SeqType\022"
    "\006\n\002SE\020\001\022\007\n\003GRE\020\002*>\n\nScanOrient\022\t\n\005AXIAL\020"
    "\001\022\013\n\007SAGITAL\020\002\022\013\n\007CORONAL\020\003\022\013\n\007OBLIQUE\020\004"
    "*\'\n\rFreqDirection\022\006\n\002LR\020\001\022\006\n\002AP\020\002\022\006\n\002IS\020"
    "\003", 2321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mrgfus.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mrgfus_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mrgfus_2eproto_once_);
void protobuf_AddDesc_mrgfus_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mrgfus_2eproto_once_,
                 &protobuf_AddDesc_mrgfus_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mrgfus_2eproto {
  StaticDescriptorInitializer_mrgfus_2eproto() {
    protobuf_AddDesc_mrgfus_2eproto();
  }
} static_descriptor_initializer_mrgfus_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExecResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecResult_descriptor_;
}
bool ExecResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SeqType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqType_descriptor_;
}
bool SeqType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScanOrient_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanOrient_descriptor_;
}
bool ScanOrient_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FreqDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreqDirection_descriptor_;
}
bool FreqDirection_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SESeq::kOrientationFieldNumber;
const int SESeq::kFovFieldNumber;
const int SESeq::kSliceThicknessFieldNumber;
const int SESeq::kSliceSpacingFieldNumber;
const int SESeq::kStartRlFieldNumber;
const int SESeq::kStartApFieldNumber;
const int SESeq::kStartIsFieldNumber;
const int SESeq::kEndRlFieldNumber;
const int SESeq::kEndApFieldNumber;
const int SESeq::kEndIsFieldNumber;
const int SESeq::kSlicesFieldNumber;
const int SESeq::kImageHeightFieldNumber;
const int SESeq::kImageWidthFieldNumber;
const int SESeq::kTeFieldNumber;
const int SESeq::kTrFieldNumber;
const int SESeq::kFaFieldNumber;
const int SESeq::kFreqEncodingFieldNumber;
const int SESeq::kPhaseEncodingFieldNumber;
const int SESeq::kNexFieldNumber;
const int SESeq::kBandWidthFieldNumber;
const int SESeq::kFreqDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SESeq::SESeq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mrgfus_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SESeq)
}

void SESeq::InitAsDefaultInstance() {
}

SESeq::SESeq(const SESeq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SESeq)
}

void SESeq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&slice_thickness_, 0, reinterpret_cast<char*>(&phase_encoding_) -
    reinterpret_cast<char*>(&slice_thickness_) + sizeof(phase_encoding_));
  orientation_ = 1;
  freq_dir_ = 1;
}

SESeq::~SESeq() {
  // @@protoc_insertion_point(destructor:SESeq)
  SharedDtor();
}

void SESeq::SharedDtor() {
}

void SESeq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SESeq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SESeq_descriptor_;
}

const SESeq& SESeq::default_instance() {
  protobuf_InitDefaults_mrgfus_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SESeq> SESeq_default_instance_;

SESeq* SESeq::New(::google::protobuf::Arena* arena) const {
  SESeq* n = new SESeq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SESeq::Clear() {
// @@protoc_insertion_point(message_clear_start:SESeq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SESeq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SESeq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(slice_thickness_, fov_);
    ZR_(start_is_, end_rl_);
    orientation_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(end_ap_, fa_);
    slices_ = 0u;
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ZR_(freq_encoding_, phase_encoding_);
    freq_dir_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SESeq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SESeq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ScanOrient orientation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScanOrient_IsValid(value)) {
            set_orientation(static_cast< ::ScanOrient >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fov;
        break;
      }

      // required uint32 fov = 2;
      case 2: {
        if (tag == 16) {
         parse_fov:
          set_has_fov();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fov_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_slice_thickness;
        break;
      }

      // required double slice_thickness = 3;
      case 3: {
        if (tag == 25) {
         parse_slice_thickness:
          set_has_slice_thickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slice_thickness_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_slice_spacing;
        break;
      }

      // required double slice_spacing = 4;
      case 4: {
        if (tag == 33) {
         parse_slice_spacing:
          set_has_slice_spacing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slice_spacing_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_start_rl;
        break;
      }

      // required double start_rl = 5;
      case 5: {
        if (tag == 41) {
         parse_start_rl:
          set_has_start_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_rl_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_start_ap;
        break;
      }

      // required double start_ap = 6;
      case 6: {
        if (tag == 49) {
         parse_start_ap:
          set_has_start_ap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_ap_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_start_is;
        break;
      }

      // required double start_is = 7;
      case 7: {
        if (tag == 57) {
         parse_start_is:
          set_has_start_is();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_is_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_end_rl;
        break;
      }

      // required double end_rl = 8;
      case 8: {
        if (tag == 65) {
         parse_end_rl:
          set_has_end_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_rl_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_end_ap;
        break;
      }

      // required double end_ap = 9;
      case 9: {
        if (tag == 73) {
         parse_end_ap:
          set_has_end_ap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_ap_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_end_is;
        break;
      }

      // required double end_is = 10;
      case 10: {
        if (tag == 81) {
         parse_end_is:
          set_has_end_is();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_is_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_slices;
        break;
      }

      // required uint32 slices = 11;
      case 11: {
        if (tag == 88) {
         parse_slices:
          set_has_slices();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slices_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_image_height;
        break;
      }

      // required uint32 image_height = 12;
      case 12: {
        if (tag == 96) {
         parse_image_height:
          set_has_image_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_image_width;
        break;
      }

      // required uint32 image_width = 13;
      case 13: {
        if (tag == 104) {
         parse_image_width:
          set_has_image_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_te;
        break;
      }

      // optional uint32 te = 14;
      case 14: {
        if (tag == 112) {
         parse_te:
          set_has_te();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &te_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_tr;
        break;
      }

      // optional uint32 tr = 15;
      case 15: {
        if (tag == 120) {
         parse_tr:
          set_has_tr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tr_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_fa;
        break;
      }

      // optional uint32 fa = 16;
      case 16: {
        if (tag == 128) {
         parse_fa:
          set_has_fa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_freq_encoding;
        break;
      }

      // optional uint32 freq_encoding = 17;
      case 17: {
        if (tag == 136) {
         parse_freq_encoding:
          set_has_freq_encoding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freq_encoding_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_phase_encoding;
        break;
      }

      // optional uint32 phase_encoding = 18;
      case 18: {
        if (tag == 144) {
         parse_phase_encoding:
          set_has_phase_encoding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_encoding_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_nex;
        break;
      }

      // optional double nex = 19;
      case 19: {
        if (tag == 153) {
         parse_nex:
          set_has_nex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_band_width;
        break;
      }

      // optional double band_width = 20;
      case 20: {
        if (tag == 161) {
         parse_band_width:
          set_has_band_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &band_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_freq_dir;
        break;
      }

      // optional .FreqDirection freq_dir = 21;
      case 21: {
        if (tag == 168) {
         parse_freq_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FreqDirection_IsValid(value)) {
            set_freq_dir(static_cast< ::FreqDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SESeq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SESeq)
  return false;
#undef DO_
}

void SESeq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SESeq)
  // required .ScanOrient orientation = 1;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->orientation(), output);
  }

  // required uint32 fov = 2;
  if (has_fov()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fov(), output);
  }

  // required double slice_thickness = 3;
  if (has_slice_thickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->slice_thickness(), output);
  }

  // required double slice_spacing = 4;
  if (has_slice_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->slice_spacing(), output);
  }

  // required double start_rl = 5;
  if (has_start_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->start_rl(), output);
  }

  // required double start_ap = 6;
  if (has_start_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->start_ap(), output);
  }

  // required double start_is = 7;
  if (has_start_is()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->start_is(), output);
  }

  // required double end_rl = 8;
  if (has_end_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->end_rl(), output);
  }

  // required double end_ap = 9;
  if (has_end_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->end_ap(), output);
  }

  // required double end_is = 10;
  if (has_end_is()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->end_is(), output);
  }

  // required uint32 slices = 11;
  if (has_slices()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->slices(), output);
  }

  // required uint32 image_height = 12;
  if (has_image_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->image_height(), output);
  }

  // required uint32 image_width = 13;
  if (has_image_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->image_width(), output);
  }

  // optional uint32 te = 14;
  if (has_te()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->te(), output);
  }

  // optional uint32 tr = 15;
  if (has_tr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->tr(), output);
  }

  // optional uint32 fa = 16;
  if (has_fa()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fa(), output);
  }

  // optional uint32 freq_encoding = 17;
  if (has_freq_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->freq_encoding(), output);
  }

  // optional uint32 phase_encoding = 18;
  if (has_phase_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->phase_encoding(), output);
  }

  // optional double nex = 19;
  if (has_nex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->nex(), output);
  }

  // optional double band_width = 20;
  if (has_band_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->band_width(), output);
  }

  // optional .FreqDirection freq_dir = 21;
  if (has_freq_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->freq_dir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SESeq)
}

::google::protobuf::uint8* SESeq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SESeq)
  // required .ScanOrient orientation = 1;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->orientation(), target);
  }

  // required uint32 fov = 2;
  if (has_fov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fov(), target);
  }

  // required double slice_thickness = 3;
  if (has_slice_thickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->slice_thickness(), target);
  }

  // required double slice_spacing = 4;
  if (has_slice_spacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->slice_spacing(), target);
  }

  // required double start_rl = 5;
  if (has_start_rl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->start_rl(), target);
  }

  // required double start_ap = 6;
  if (has_start_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->start_ap(), target);
  }

  // required double start_is = 7;
  if (has_start_is()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->start_is(), target);
  }

  // required double end_rl = 8;
  if (has_end_rl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->end_rl(), target);
  }

  // required double end_ap = 9;
  if (has_end_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->end_ap(), target);
  }

  // required double end_is = 10;
  if (has_end_is()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->end_is(), target);
  }

  // required uint32 slices = 11;
  if (has_slices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->slices(), target);
  }

  // required uint32 image_height = 12;
  if (has_image_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->image_height(), target);
  }

  // required uint32 image_width = 13;
  if (has_image_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->image_width(), target);
  }

  // optional uint32 te = 14;
  if (has_te()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->te(), target);
  }

  // optional uint32 tr = 15;
  if (has_tr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->tr(), target);
  }

  // optional uint32 fa = 16;
  if (has_fa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fa(), target);
  }

  // optional uint32 freq_encoding = 17;
  if (has_freq_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->freq_encoding(), target);
  }

  // optional uint32 phase_encoding = 18;
  if (has_phase_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->phase_encoding(), target);
  }

  // optional double nex = 19;
  if (has_nex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->nex(), target);
  }

  // optional double band_width = 20;
  if (has_band_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->band_width(), target);
  }

  // optional .FreqDirection freq_dir = 21;
  if (has_freq_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->freq_dir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SESeq)
  return target;
}

size_t SESeq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SESeq)
  size_t total_size = 0;

  if (has_orientation()) {
    // required .ScanOrient orientation = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());
  }

  if (has_fov()) {
    // required uint32 fov = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fov());
  }

  if (has_slice_thickness()) {
    // required double slice_thickness = 3;
    total_size += 1 + 8;
  }

  if (has_slice_spacing()) {
    // required double slice_spacing = 4;
    total_size += 1 + 8;
  }

  if (has_start_rl()) {
    // required double start_rl = 5;
    total_size += 1 + 8;
  }

  if (has_start_ap()) {
    // required double start_ap = 6;
    total_size += 1 + 8;
  }

  if (has_start_is()) {
    // required double start_is = 7;
    total_size += 1 + 8;
  }

  if (has_end_rl()) {
    // required double end_rl = 8;
    total_size += 1 + 8;
  }

  if (has_end_ap()) {
    // required double end_ap = 9;
    total_size += 1 + 8;
  }

  if (has_end_is()) {
    // required double end_is = 10;
    total_size += 1 + 8;
  }

  if (has_slices()) {
    // required uint32 slices = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slices());
  }

  if (has_image_height()) {
    // required uint32 image_height = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_height());
  }

  if (has_image_width()) {
    // required uint32 image_width = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_width());
  }

  return total_size;
}
size_t SESeq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SESeq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required .ScanOrient orientation = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());

    // required uint32 fov = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fov());

    // required double slice_thickness = 3;
    total_size += 1 + 8;

    // required double slice_spacing = 4;
    total_size += 1 + 8;

    // required double start_rl = 5;
    total_size += 1 + 8;

    // required double start_ap = 6;
    total_size += 1 + 8;

    // required double start_is = 7;
    total_size += 1 + 8;

    // required double end_rl = 8;
    total_size += 1 + 8;

    // required double end_ap = 9;
    total_size += 1 + 8;

    // required double end_is = 10;
    total_size += 1 + 8;

    // required uint32 slices = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slices());

    // required uint32 image_height = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_height());

    // required uint32 image_width = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[13 / 32] & 57344u) {
    // optional uint32 te = 14;
    if (has_te()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->te());
    }

    // optional uint32 tr = 15;
    if (has_tr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tr());
    }

    // optional uint32 fa = 16;
    if (has_fa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fa());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional uint32 freq_encoding = 17;
    if (has_freq_encoding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freq_encoding());
    }

    // optional uint32 phase_encoding = 18;
    if (has_phase_encoding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_encoding());
    }

    // optional double nex = 19;
    if (has_nex()) {
      total_size += 2 + 8;
    }

    // optional double band_width = 20;
    if (has_band_width()) {
      total_size += 2 + 8;
    }

    // optional .FreqDirection freq_dir = 21;
    if (has_freq_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->freq_dir());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SESeq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SESeq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SESeq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SESeq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SESeq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SESeq)
    UnsafeMergeFrom(*source);
  }
}

void SESeq::MergeFrom(const SESeq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SESeq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SESeq::UnsafeMergeFrom(const SESeq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_fov()) {
      set_fov(from.fov());
    }
    if (from.has_slice_thickness()) {
      set_slice_thickness(from.slice_thickness());
    }
    if (from.has_slice_spacing()) {
      set_slice_spacing(from.slice_spacing());
    }
    if (from.has_start_rl()) {
      set_start_rl(from.start_rl());
    }
    if (from.has_start_ap()) {
      set_start_ap(from.start_ap());
    }
    if (from.has_start_is()) {
      set_start_is(from.start_is());
    }
    if (from.has_end_rl()) {
      set_end_rl(from.end_rl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_ap()) {
      set_end_ap(from.end_ap());
    }
    if (from.has_end_is()) {
      set_end_is(from.end_is());
    }
    if (from.has_slices()) {
      set_slices(from.slices());
    }
    if (from.has_image_height()) {
      set_image_height(from.image_height());
    }
    if (from.has_image_width()) {
      set_image_width(from.image_width());
    }
    if (from.has_te()) {
      set_te(from.te());
    }
    if (from.has_tr()) {
      set_tr(from.tr());
    }
    if (from.has_fa()) {
      set_fa(from.fa());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_freq_encoding()) {
      set_freq_encoding(from.freq_encoding());
    }
    if (from.has_phase_encoding()) {
      set_phase_encoding(from.phase_encoding());
    }
    if (from.has_nex()) {
      set_nex(from.nex());
    }
    if (from.has_band_width()) {
      set_band_width(from.band_width());
    }
    if (from.has_freq_dir()) {
      set_freq_dir(from.freq_dir());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SESeq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SESeq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SESeq::CopyFrom(const SESeq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SESeq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SESeq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void SESeq::Swap(SESeq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SESeq::InternalSwap(SESeq* other) {
  std::swap(orientation_, other->orientation_);
  std::swap(fov_, other->fov_);
  std::swap(slice_thickness_, other->slice_thickness_);
  std::swap(slice_spacing_, other->slice_spacing_);
  std::swap(start_rl_, other->start_rl_);
  std::swap(start_ap_, other->start_ap_);
  std::swap(start_is_, other->start_is_);
  std::swap(end_rl_, other->end_rl_);
  std::swap(end_ap_, other->end_ap_);
  std::swap(end_is_, other->end_is_);
  std::swap(slices_, other->slices_);
  std::swap(image_height_, other->image_height_);
  std::swap(image_width_, other->image_width_);
  std::swap(te_, other->te_);
  std::swap(tr_, other->tr_);
  std::swap(fa_, other->fa_);
  std::swap(freq_encoding_, other->freq_encoding_);
  std::swap(phase_encoding_, other->phase_encoding_);
  std::swap(nex_, other->nex_);
  std::swap(band_width_, other->band_width_);
  std::swap(freq_dir_, other->freq_dir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SESeq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SESeq_descriptor_;
  metadata.reflection = SESeq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SESeq

// required .ScanOrient orientation = 1;
bool SESeq::has_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SESeq::set_has_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
void SESeq::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
void SESeq::clear_orientation() {
  orientation_ = 1;
  clear_has_orientation();
}
::ScanOrient SESeq::orientation() const {
  // @@protoc_insertion_point(field_get:SESeq.orientation)
  return static_cast< ::ScanOrient >(orientation_);
}
void SESeq::set_orientation(::ScanOrient value) {
  assert(::ScanOrient_IsValid(value));
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:SESeq.orientation)
}

// required uint32 fov = 2;
bool SESeq::has_fov() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SESeq::set_has_fov() {
  _has_bits_[0] |= 0x00000002u;
}
void SESeq::clear_has_fov() {
  _has_bits_[0] &= ~0x00000002u;
}
void SESeq::clear_fov() {
  fov_ = 0u;
  clear_has_fov();
}
::google::protobuf::uint32 SESeq::fov() const {
  // @@protoc_insertion_point(field_get:SESeq.fov)
  return fov_;
}
void SESeq::set_fov(::google::protobuf::uint32 value) {
  set_has_fov();
  fov_ = value;
  // @@protoc_insertion_point(field_set:SESeq.fov)
}

// required double slice_thickness = 3;
bool SESeq::has_slice_thickness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SESeq::set_has_slice_thickness() {
  _has_bits_[0] |= 0x00000004u;
}
void SESeq::clear_has_slice_thickness() {
  _has_bits_[0] &= ~0x00000004u;
}
void SESeq::clear_slice_thickness() {
  slice_thickness_ = 0;
  clear_has_slice_thickness();
}
double SESeq::slice_thickness() const {
  // @@protoc_insertion_point(field_get:SESeq.slice_thickness)
  return slice_thickness_;
}
void SESeq::set_slice_thickness(double value) {
  set_has_slice_thickness();
  slice_thickness_ = value;
  // @@protoc_insertion_point(field_set:SESeq.slice_thickness)
}

// required double slice_spacing = 4;
bool SESeq::has_slice_spacing() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SESeq::set_has_slice_spacing() {
  _has_bits_[0] |= 0x00000008u;
}
void SESeq::clear_has_slice_spacing() {
  _has_bits_[0] &= ~0x00000008u;
}
void SESeq::clear_slice_spacing() {
  slice_spacing_ = 0;
  clear_has_slice_spacing();
}
double SESeq::slice_spacing() const {
  // @@protoc_insertion_point(field_get:SESeq.slice_spacing)
  return slice_spacing_;
}
void SESeq::set_slice_spacing(double value) {
  set_has_slice_spacing();
  slice_spacing_ = value;
  // @@protoc_insertion_point(field_set:SESeq.slice_spacing)
}

// required double start_rl = 5;
bool SESeq::has_start_rl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SESeq::set_has_start_rl() {
  _has_bits_[0] |= 0x00000010u;
}
void SESeq::clear_has_start_rl() {
  _has_bits_[0] &= ~0x00000010u;
}
void SESeq::clear_start_rl() {
  start_rl_ = 0;
  clear_has_start_rl();
}
double SESeq::start_rl() const {
  // @@protoc_insertion_point(field_get:SESeq.start_rl)
  return start_rl_;
}
void SESeq::set_start_rl(double value) {
  set_has_start_rl();
  start_rl_ = value;
  // @@protoc_insertion_point(field_set:SESeq.start_rl)
}

// required double start_ap = 6;
bool SESeq::has_start_ap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SESeq::set_has_start_ap() {
  _has_bits_[0] |= 0x00000020u;
}
void SESeq::clear_has_start_ap() {
  _has_bits_[0] &= ~0x00000020u;
}
void SESeq::clear_start_ap() {
  start_ap_ = 0;
  clear_has_start_ap();
}
double SESeq::start_ap() const {
  // @@protoc_insertion_point(field_get:SESeq.start_ap)
  return start_ap_;
}
void SESeq::set_start_ap(double value) {
  set_has_start_ap();
  start_ap_ = value;
  // @@protoc_insertion_point(field_set:SESeq.start_ap)
}

// required double start_is = 7;
bool SESeq::has_start_is() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SESeq::set_has_start_is() {
  _has_bits_[0] |= 0x00000040u;
}
void SESeq::clear_has_start_is() {
  _has_bits_[0] &= ~0x00000040u;
}
void SESeq::clear_start_is() {
  start_is_ = 0;
  clear_has_start_is();
}
double SESeq::start_is() const {
  // @@protoc_insertion_point(field_get:SESeq.start_is)
  return start_is_;
}
void SESeq::set_start_is(double value) {
  set_has_start_is();
  start_is_ = value;
  // @@protoc_insertion_point(field_set:SESeq.start_is)
}

// required double end_rl = 8;
bool SESeq::has_end_rl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SESeq::set_has_end_rl() {
  _has_bits_[0] |= 0x00000080u;
}
void SESeq::clear_has_end_rl() {
  _has_bits_[0] &= ~0x00000080u;
}
void SESeq::clear_end_rl() {
  end_rl_ = 0;
  clear_has_end_rl();
}
double SESeq::end_rl() const {
  // @@protoc_insertion_point(field_get:SESeq.end_rl)
  return end_rl_;
}
void SESeq::set_end_rl(double value) {
  set_has_end_rl();
  end_rl_ = value;
  // @@protoc_insertion_point(field_set:SESeq.end_rl)
}

// required double end_ap = 9;
bool SESeq::has_end_ap() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SESeq::set_has_end_ap() {
  _has_bits_[0] |= 0x00000100u;
}
void SESeq::clear_has_end_ap() {
  _has_bits_[0] &= ~0x00000100u;
}
void SESeq::clear_end_ap() {
  end_ap_ = 0;
  clear_has_end_ap();
}
double SESeq::end_ap() const {
  // @@protoc_insertion_point(field_get:SESeq.end_ap)
  return end_ap_;
}
void SESeq::set_end_ap(double value) {
  set_has_end_ap();
  end_ap_ = value;
  // @@protoc_insertion_point(field_set:SESeq.end_ap)
}

// required double end_is = 10;
bool SESeq::has_end_is() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SESeq::set_has_end_is() {
  _has_bits_[0] |= 0x00000200u;
}
void SESeq::clear_has_end_is() {
  _has_bits_[0] &= ~0x00000200u;
}
void SESeq::clear_end_is() {
  end_is_ = 0;
  clear_has_end_is();
}
double SESeq::end_is() const {
  // @@protoc_insertion_point(field_get:SESeq.end_is)
  return end_is_;
}
void SESeq::set_end_is(double value) {
  set_has_end_is();
  end_is_ = value;
  // @@protoc_insertion_point(field_set:SESeq.end_is)
}

// required uint32 slices = 11;
bool SESeq::has_slices() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SESeq::set_has_slices() {
  _has_bits_[0] |= 0x00000400u;
}
void SESeq::clear_has_slices() {
  _has_bits_[0] &= ~0x00000400u;
}
void SESeq::clear_slices() {
  slices_ = 0u;
  clear_has_slices();
}
::google::protobuf::uint32 SESeq::slices() const {
  // @@protoc_insertion_point(field_get:SESeq.slices)
  return slices_;
}
void SESeq::set_slices(::google::protobuf::uint32 value) {
  set_has_slices();
  slices_ = value;
  // @@protoc_insertion_point(field_set:SESeq.slices)
}

// required uint32 image_height = 12;
bool SESeq::has_image_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SESeq::set_has_image_height() {
  _has_bits_[0] |= 0x00000800u;
}
void SESeq::clear_has_image_height() {
  _has_bits_[0] &= ~0x00000800u;
}
void SESeq::clear_image_height() {
  image_height_ = 0u;
  clear_has_image_height();
}
::google::protobuf::uint32 SESeq::image_height() const {
  // @@protoc_insertion_point(field_get:SESeq.image_height)
  return image_height_;
}
void SESeq::set_image_height(::google::protobuf::uint32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:SESeq.image_height)
}

// required uint32 image_width = 13;
bool SESeq::has_image_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SESeq::set_has_image_width() {
  _has_bits_[0] |= 0x00001000u;
}
void SESeq::clear_has_image_width() {
  _has_bits_[0] &= ~0x00001000u;
}
void SESeq::clear_image_width() {
  image_width_ = 0u;
  clear_has_image_width();
}
::google::protobuf::uint32 SESeq::image_width() const {
  // @@protoc_insertion_point(field_get:SESeq.image_width)
  return image_width_;
}
void SESeq::set_image_width(::google::protobuf::uint32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:SESeq.image_width)
}

// optional uint32 te = 14;
bool SESeq::has_te() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SESeq::set_has_te() {
  _has_bits_[0] |= 0x00002000u;
}
void SESeq::clear_has_te() {
  _has_bits_[0] &= ~0x00002000u;
}
void SESeq::clear_te() {
  te_ = 0u;
  clear_has_te();
}
::google::protobuf::uint32 SESeq::te() const {
  // @@protoc_insertion_point(field_get:SESeq.te)
  return te_;
}
void SESeq::set_te(::google::protobuf::uint32 value) {
  set_has_te();
  te_ = value;
  // @@protoc_insertion_point(field_set:SESeq.te)
}

// optional uint32 tr = 15;
bool SESeq::has_tr() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SESeq::set_has_tr() {
  _has_bits_[0] |= 0x00004000u;
}
void SESeq::clear_has_tr() {
  _has_bits_[0] &= ~0x00004000u;
}
void SESeq::clear_tr() {
  tr_ = 0u;
  clear_has_tr();
}
::google::protobuf::uint32 SESeq::tr() const {
  // @@protoc_insertion_point(field_get:SESeq.tr)
  return tr_;
}
void SESeq::set_tr(::google::protobuf::uint32 value) {
  set_has_tr();
  tr_ = value;
  // @@protoc_insertion_point(field_set:SESeq.tr)
}

// optional uint32 fa = 16;
bool SESeq::has_fa() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SESeq::set_has_fa() {
  _has_bits_[0] |= 0x00008000u;
}
void SESeq::clear_has_fa() {
  _has_bits_[0] &= ~0x00008000u;
}
void SESeq::clear_fa() {
  fa_ = 0u;
  clear_has_fa();
}
::google::protobuf::uint32 SESeq::fa() const {
  // @@protoc_insertion_point(field_get:SESeq.fa)
  return fa_;
}
void SESeq::set_fa(::google::protobuf::uint32 value) {
  set_has_fa();
  fa_ = value;
  // @@protoc_insertion_point(field_set:SESeq.fa)
}

// optional uint32 freq_encoding = 17;
bool SESeq::has_freq_encoding() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SESeq::set_has_freq_encoding() {
  _has_bits_[0] |= 0x00010000u;
}
void SESeq::clear_has_freq_encoding() {
  _has_bits_[0] &= ~0x00010000u;
}
void SESeq::clear_freq_encoding() {
  freq_encoding_ = 0u;
  clear_has_freq_encoding();
}
::google::protobuf::uint32 SESeq::freq_encoding() const {
  // @@protoc_insertion_point(field_get:SESeq.freq_encoding)
  return freq_encoding_;
}
void SESeq::set_freq_encoding(::google::protobuf::uint32 value) {
  set_has_freq_encoding();
  freq_encoding_ = value;
  // @@protoc_insertion_point(field_set:SESeq.freq_encoding)
}

// optional uint32 phase_encoding = 18;
bool SESeq::has_phase_encoding() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SESeq::set_has_phase_encoding() {
  _has_bits_[0] |= 0x00020000u;
}
void SESeq::clear_has_phase_encoding() {
  _has_bits_[0] &= ~0x00020000u;
}
void SESeq::clear_phase_encoding() {
  phase_encoding_ = 0u;
  clear_has_phase_encoding();
}
::google::protobuf::uint32 SESeq::phase_encoding() const {
  // @@protoc_insertion_point(field_get:SESeq.phase_encoding)
  return phase_encoding_;
}
void SESeq::set_phase_encoding(::google::protobuf::uint32 value) {
  set_has_phase_encoding();
  phase_encoding_ = value;
  // @@protoc_insertion_point(field_set:SESeq.phase_encoding)
}

// optional double nex = 19;
bool SESeq::has_nex() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SESeq::set_has_nex() {
  _has_bits_[0] |= 0x00040000u;
}
void SESeq::clear_has_nex() {
  _has_bits_[0] &= ~0x00040000u;
}
void SESeq::clear_nex() {
  nex_ = 0;
  clear_has_nex();
}
double SESeq::nex() const {
  // @@protoc_insertion_point(field_get:SESeq.nex)
  return nex_;
}
void SESeq::set_nex(double value) {
  set_has_nex();
  nex_ = value;
  // @@protoc_insertion_point(field_set:SESeq.nex)
}

// optional double band_width = 20;
bool SESeq::has_band_width() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SESeq::set_has_band_width() {
  _has_bits_[0] |= 0x00080000u;
}
void SESeq::clear_has_band_width() {
  _has_bits_[0] &= ~0x00080000u;
}
void SESeq::clear_band_width() {
  band_width_ = 0;
  clear_has_band_width();
}
double SESeq::band_width() const {
  // @@protoc_insertion_point(field_get:SESeq.band_width)
  return band_width_;
}
void SESeq::set_band_width(double value) {
  set_has_band_width();
  band_width_ = value;
  // @@protoc_insertion_point(field_set:SESeq.band_width)
}

// optional .FreqDirection freq_dir = 21;
bool SESeq::has_freq_dir() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SESeq::set_has_freq_dir() {
  _has_bits_[0] |= 0x00100000u;
}
void SESeq::clear_has_freq_dir() {
  _has_bits_[0] &= ~0x00100000u;
}
void SESeq::clear_freq_dir() {
  freq_dir_ = 1;
  clear_has_freq_dir();
}
::FreqDirection SESeq::freq_dir() const {
  // @@protoc_insertion_point(field_get:SESeq.freq_dir)
  return static_cast< ::FreqDirection >(freq_dir_);
}
void SESeq::set_freq_dir(::FreqDirection value) {
  assert(::FreqDirection_IsValid(value));
  set_has_freq_dir();
  freq_dir_ = value;
  // @@protoc_insertion_point(field_set:SESeq.freq_dir)
}

inline const SESeq* SESeq::internal_default_instance() {
  return &SESeq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GRESeq::kThmCalcFieldNumber;
const int GRESeq::kOrientationFieldNumber;
const int GRESeq::kFovFieldNumber;
const int GRESeq::kSliceThicknessFieldNumber;
const int GRESeq::kSliceSpacingFieldNumber;
const int GRESeq::kStartRlFieldNumber;
const int GRESeq::kStartApFieldNumber;
const int GRESeq::kStartIsFieldNumber;
const int GRESeq::kEndRlFieldNumber;
const int GRESeq::kEndApFieldNumber;
const int GRESeq::kEndIsFieldNumber;
const int GRESeq::kSlicesFieldNumber;
const int GRESeq::kPhasesFieldNumber;
const int GRESeq::kDelayFieldNumber;
const int GRESeq::kImageHeightFieldNumber;
const int GRESeq::kImageWidthFieldNumber;
const int GRESeq::kThmXFieldNumber;
const int GRESeq::kThmYFieldNumber;
const int GRESeq::kThmHeightFieldNumber;
const int GRESeq::kThmWidthFieldNumber;
const int GRESeq::kThmRefXFieldNumber;
const int GRESeq::kThmRefYFieldNumber;
const int GRESeq::kThmRefHeightFieldNumber;
const int GRESeq::kThmRefWidthFieldNumber;
const int GRESeq::kTeFieldNumber;
const int GRESeq::kTrFieldNumber;
const int GRESeq::kFaFieldNumber;
const int GRESeq::kFreqEncodingFieldNumber;
const int GRESeq::kPhaseEncodingFieldNumber;
const int GRESeq::kNexFieldNumber;
const int GRESeq::kBandWidthFieldNumber;
const int GRESeq::kFreqDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GRESeq::GRESeq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mrgfus_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRESeq)
}

void GRESeq::InitAsDefaultInstance() {
}

GRESeq::GRESeq(const GRESeq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GRESeq)
}

void GRESeq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&thm_calc_, 0, reinterpret_cast<char*>(&phase_encoding_) -
    reinterpret_cast<char*>(&thm_calc_) + sizeof(phase_encoding_));
  orientation_ = 1;
  freq_dir_ = 1;
}

GRESeq::~GRESeq() {
  // @@protoc_insertion_point(destructor:GRESeq)
  SharedDtor();
}

void GRESeq::SharedDtor() {
}

void GRESeq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRESeq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRESeq_descriptor_;
}

const GRESeq& GRESeq::default_instance() {
  protobuf_InitDefaults_mrgfus_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GRESeq> GRESeq_default_instance_;

GRESeq* GRESeq::New(::google::protobuf::Arena* arena) const {
  GRESeq* n = new GRESeq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GRESeq::Clear() {
// @@protoc_insertion_point(message_clear_start:GRESeq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GRESeq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GRESeq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(thm_calc_, start_is_);
    orientation_ = 1;
  }
  ZR_(end_rl_, image_width_);
  ZR_(thm_x_, thm_ref_width_);
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(te_, phase_encoding_);
    freq_dir_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GRESeq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRESeq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool thm_calc = 1;
      case 1: {
        if (tag == 8) {
          set_has_thm_calc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &thm_calc_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_orientation;
        break;
      }

      // required .ScanOrient orientation = 2;
      case 2: {
        if (tag == 16) {
         parse_orientation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScanOrient_IsValid(value)) {
            set_orientation(static_cast< ::ScanOrient >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fov;
        break;
      }

      // required uint32 fov = 3;
      case 3: {
        if (tag == 24) {
         parse_fov:
          set_has_fov();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fov_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_slice_thickness;
        break;
      }

      // required double slice_thickness = 4;
      case 4: {
        if (tag == 33) {
         parse_slice_thickness:
          set_has_slice_thickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slice_thickness_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_slice_spacing;
        break;
      }

      // required double slice_spacing = 5;
      case 5: {
        if (tag == 41) {
         parse_slice_spacing:
          set_has_slice_spacing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slice_spacing_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_start_rl;
        break;
      }

      // required double start_rl = 6;
      case 6: {
        if (tag == 49) {
         parse_start_rl:
          set_has_start_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_rl_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_start_ap;
        break;
      }

      // required double start_ap = 7;
      case 7: {
        if (tag == 57) {
         parse_start_ap:
          set_has_start_ap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_ap_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_start_is;
        break;
      }

      // required double start_is = 8;
      case 8: {
        if (tag == 65) {
         parse_start_is:
          set_has_start_is();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_is_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_end_rl;
        break;
      }

      // required double end_rl = 9;
      case 9: {
        if (tag == 73) {
         parse_end_rl:
          set_has_end_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_rl_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_end_ap;
        break;
      }

      // required double end_ap = 10;
      case 10: {
        if (tag == 81) {
         parse_end_ap:
          set_has_end_ap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_ap_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_end_is;
        break;
      }

      // required double end_is = 11;
      case 11: {
        if (tag == 89) {
         parse_end_is:
          set_has_end_is();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_is_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_slices;
        break;
      }

      // required uint32 slices = 12;
      case 12: {
        if (tag == 96) {
         parse_slices:
          set_has_slices();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slices_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_phases;
        break;
      }

      // required uint32 phases = 13;
      case 13: {
        if (tag == 104) {
         parse_phases:
          set_has_phases();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phases_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_delay;
        break;
      }

      // required double delay = 14;
      case 14: {
        if (tag == 113) {
         parse_delay:
          set_has_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_image_height;
        break;
      }

      // required uint32 image_height = 15;
      case 15: {
        if (tag == 120) {
         parse_image_height:
          set_has_image_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_image_width;
        break;
      }

      // required uint32 image_width = 16;
      case 16: {
        if (tag == 128) {
         parse_image_width:
          set_has_image_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_thm_x;
        break;
      }

      // optional uint32 thm_x = 17;
      case 17: {
        if (tag == 136) {
         parse_thm_x:
          set_has_thm_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_thm_y;
        break;
      }

      // optional uint32 thm_y = 18;
      case 18: {
        if (tag == 144) {
         parse_thm_y:
          set_has_thm_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_thm_height;
        break;
      }

      // optional uint32 thm_height = 19;
      case 19: {
        if (tag == 152) {
         parse_thm_height:
          set_has_thm_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_thm_width;
        break;
      }

      // optional uint32 thm_width = 20;
      case 20: {
        if (tag == 160) {
         parse_thm_width:
          set_has_thm_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_thm_ref_x;
        break;
      }

      // optional uint32 thm_ref_x = 21;
      case 21: {
        if (tag == 168) {
         parse_thm_ref_x:
          set_has_thm_ref_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_ref_x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_thm_ref_y;
        break;
      }

      // optional uint32 thm_ref_y = 22;
      case 22: {
        if (tag == 176) {
         parse_thm_ref_y:
          set_has_thm_ref_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_ref_y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_thm_ref_height;
        break;
      }

      // optional uint32 thm_ref_height = 23;
      case 23: {
        if (tag == 184) {
         parse_thm_ref_height:
          set_has_thm_ref_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_ref_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_thm_ref_width;
        break;
      }

      // optional uint32 thm_ref_width = 24;
      case 24: {
        if (tag == 192) {
         parse_thm_ref_width:
          set_has_thm_ref_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_ref_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_te;
        break;
      }

      // optional uint32 te = 25;
      case 25: {
        if (tag == 200) {
         parse_te:
          set_has_te();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &te_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_tr;
        break;
      }

      // optional uint32 tr = 26;
      case 26: {
        if (tag == 208) {
         parse_tr:
          set_has_tr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tr_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_fa;
        break;
      }

      // optional uint32 fa = 27;
      case 27: {
        if (tag == 216) {
         parse_fa:
          set_has_fa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_freq_encoding;
        break;
      }

      // optional uint32 freq_encoding = 28;
      case 28: {
        if (tag == 224) {
         parse_freq_encoding:
          set_has_freq_encoding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freq_encoding_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_phase_encoding;
        break;
      }

      // optional uint32 phase_encoding = 29;
      case 29: {
        if (tag == 232) {
         parse_phase_encoding:
          set_has_phase_encoding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_encoding_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_nex;
        break;
      }

      // optional double nex = 30;
      case 30: {
        if (tag == 241) {
         parse_nex:
          set_has_nex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_band_width;
        break;
      }

      // optional double band_width = 31;
      case 31: {
        if (tag == 249) {
         parse_band_width:
          set_has_band_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &band_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_freq_dir;
        break;
      }

      // optional .FreqDirection freq_dir = 32;
      case 32: {
        if (tag == 256) {
         parse_freq_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FreqDirection_IsValid(value)) {
            set_freq_dir(static_cast< ::FreqDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(32, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRESeq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRESeq)
  return false;
#undef DO_
}

void GRESeq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRESeq)
  // required bool thm_calc = 1;
  if (has_thm_calc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->thm_calc(), output);
  }

  // required .ScanOrient orientation = 2;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->orientation(), output);
  }

  // required uint32 fov = 3;
  if (has_fov()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fov(), output);
  }

  // required double slice_thickness = 4;
  if (has_slice_thickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->slice_thickness(), output);
  }

  // required double slice_spacing = 5;
  if (has_slice_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->slice_spacing(), output);
  }

  // required double start_rl = 6;
  if (has_start_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->start_rl(), output);
  }

  // required double start_ap = 7;
  if (has_start_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->start_ap(), output);
  }

  // required double start_is = 8;
  if (has_start_is()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->start_is(), output);
  }

  // required double end_rl = 9;
  if (has_end_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->end_rl(), output);
  }

  // required double end_ap = 10;
  if (has_end_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->end_ap(), output);
  }

  // required double end_is = 11;
  if (has_end_is()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->end_is(), output);
  }

  // required uint32 slices = 12;
  if (has_slices()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->slices(), output);
  }

  // required uint32 phases = 13;
  if (has_phases()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->phases(), output);
  }

  // required double delay = 14;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->delay(), output);
  }

  // required uint32 image_height = 15;
  if (has_image_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->image_height(), output);
  }

  // required uint32 image_width = 16;
  if (has_image_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->image_width(), output);
  }

  // optional uint32 thm_x = 17;
  if (has_thm_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->thm_x(), output);
  }

  // optional uint32 thm_y = 18;
  if (has_thm_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->thm_y(), output);
  }

  // optional uint32 thm_height = 19;
  if (has_thm_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->thm_height(), output);
  }

  // optional uint32 thm_width = 20;
  if (has_thm_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->thm_width(), output);
  }

  // optional uint32 thm_ref_x = 21;
  if (has_thm_ref_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->thm_ref_x(), output);
  }

  // optional uint32 thm_ref_y = 22;
  if (has_thm_ref_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->thm_ref_y(), output);
  }

  // optional uint32 thm_ref_height = 23;
  if (has_thm_ref_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->thm_ref_height(), output);
  }

  // optional uint32 thm_ref_width = 24;
  if (has_thm_ref_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->thm_ref_width(), output);
  }

  // optional uint32 te = 25;
  if (has_te()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->te(), output);
  }

  // optional uint32 tr = 26;
  if (has_tr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->tr(), output);
  }

  // optional uint32 fa = 27;
  if (has_fa()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->fa(), output);
  }

  // optional uint32 freq_encoding = 28;
  if (has_freq_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->freq_encoding(), output);
  }

  // optional uint32 phase_encoding = 29;
  if (has_phase_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->phase_encoding(), output);
  }

  // optional double nex = 30;
  if (has_nex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->nex(), output);
  }

  // optional double band_width = 31;
  if (has_band_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->band_width(), output);
  }

  // optional .FreqDirection freq_dir = 32;
  if (has_freq_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->freq_dir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRESeq)
}

::google::protobuf::uint8* GRESeq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GRESeq)
  // required bool thm_calc = 1;
  if (has_thm_calc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->thm_calc(), target);
  }

  // required .ScanOrient orientation = 2;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->orientation(), target);
  }

  // required uint32 fov = 3;
  if (has_fov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fov(), target);
  }

  // required double slice_thickness = 4;
  if (has_slice_thickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->slice_thickness(), target);
  }

  // required double slice_spacing = 5;
  if (has_slice_spacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->slice_spacing(), target);
  }

  // required double start_rl = 6;
  if (has_start_rl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->start_rl(), target);
  }

  // required double start_ap = 7;
  if (has_start_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->start_ap(), target);
  }

  // required double start_is = 8;
  if (has_start_is()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->start_is(), target);
  }

  // required double end_rl = 9;
  if (has_end_rl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->end_rl(), target);
  }

  // required double end_ap = 10;
  if (has_end_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->end_ap(), target);
  }

  // required double end_is = 11;
  if (has_end_is()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->end_is(), target);
  }

  // required uint32 slices = 12;
  if (has_slices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->slices(), target);
  }

  // required uint32 phases = 13;
  if (has_phases()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->phases(), target);
  }

  // required double delay = 14;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->delay(), target);
  }

  // required uint32 image_height = 15;
  if (has_image_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->image_height(), target);
  }

  // required uint32 image_width = 16;
  if (has_image_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->image_width(), target);
  }

  // optional uint32 thm_x = 17;
  if (has_thm_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->thm_x(), target);
  }

  // optional uint32 thm_y = 18;
  if (has_thm_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->thm_y(), target);
  }

  // optional uint32 thm_height = 19;
  if (has_thm_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->thm_height(), target);
  }

  // optional uint32 thm_width = 20;
  if (has_thm_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->thm_width(), target);
  }

  // optional uint32 thm_ref_x = 21;
  if (has_thm_ref_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->thm_ref_x(), target);
  }

  // optional uint32 thm_ref_y = 22;
  if (has_thm_ref_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->thm_ref_y(), target);
  }

  // optional uint32 thm_ref_height = 23;
  if (has_thm_ref_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->thm_ref_height(), target);
  }

  // optional uint32 thm_ref_width = 24;
  if (has_thm_ref_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->thm_ref_width(), target);
  }

  // optional uint32 te = 25;
  if (has_te()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->te(), target);
  }

  // optional uint32 tr = 26;
  if (has_tr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->tr(), target);
  }

  // optional uint32 fa = 27;
  if (has_fa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->fa(), target);
  }

  // optional uint32 freq_encoding = 28;
  if (has_freq_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->freq_encoding(), target);
  }

  // optional uint32 phase_encoding = 29;
  if (has_phase_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->phase_encoding(), target);
  }

  // optional double nex = 30;
  if (has_nex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->nex(), target);
  }

  // optional double band_width = 31;
  if (has_band_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->band_width(), target);
  }

  // optional .FreqDirection freq_dir = 32;
  if (has_freq_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      32, this->freq_dir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRESeq)
  return target;
}

size_t GRESeq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GRESeq)
  size_t total_size = 0;

  if (has_thm_calc()) {
    // required bool thm_calc = 1;
    total_size += 1 + 1;
  }

  if (has_orientation()) {
    // required .ScanOrient orientation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());
  }

  if (has_fov()) {
    // required uint32 fov = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fov());
  }

  if (has_slice_thickness()) {
    // required double slice_thickness = 4;
    total_size += 1 + 8;
  }

  if (has_slice_spacing()) {
    // required double slice_spacing = 5;
    total_size += 1 + 8;
  }

  if (has_start_rl()) {
    // required double start_rl = 6;
    total_size += 1 + 8;
  }

  if (has_start_ap()) {
    // required double start_ap = 7;
    total_size += 1 + 8;
  }

  if (has_start_is()) {
    // required double start_is = 8;
    total_size += 1 + 8;
  }

  if (has_end_rl()) {
    // required double end_rl = 9;
    total_size += 1 + 8;
  }

  if (has_end_ap()) {
    // required double end_ap = 10;
    total_size += 1 + 8;
  }

  if (has_end_is()) {
    // required double end_is = 11;
    total_size += 1 + 8;
  }

  if (has_slices()) {
    // required uint32 slices = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slices());
  }

  if (has_phases()) {
    // required uint32 phases = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->phases());
  }

  if (has_delay()) {
    // required double delay = 14;
    total_size += 1 + 8;
  }

  if (has_image_height()) {
    // required uint32 image_height = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_height());
  }

  if (has_image_width()) {
    // required uint32 image_width = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_width());
  }

  return total_size;
}
size_t GRESeq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRESeq)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000ffff) ^ 0x0000ffff) == 0) {  // All required fields are present.
    // required bool thm_calc = 1;
    total_size += 1 + 1;

    // required .ScanOrient orientation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());

    // required uint32 fov = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fov());

    // required double slice_thickness = 4;
    total_size += 1 + 8;

    // required double slice_spacing = 5;
    total_size += 1 + 8;

    // required double start_rl = 6;
    total_size += 1 + 8;

    // required double start_ap = 7;
    total_size += 1 + 8;

    // required double start_is = 8;
    total_size += 1 + 8;

    // required double end_rl = 9;
    total_size += 1 + 8;

    // required double end_ap = 10;
    total_size += 1 + 8;

    // required double end_is = 11;
    total_size += 1 + 8;

    // required uint32 slices = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slices());

    // required uint32 phases = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->phases());

    // required double delay = 14;
    total_size += 1 + 8;

    // required uint32 image_height = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_height());

    // required uint32 image_width = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 thm_x = 17;
    if (has_thm_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_x());
    }

    // optional uint32 thm_y = 18;
    if (has_thm_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_y());
    }

    // optional uint32 thm_height = 19;
    if (has_thm_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_height());
    }

    // optional uint32 thm_width = 20;
    if (has_thm_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_width());
    }

    // optional uint32 thm_ref_x = 21;
    if (has_thm_ref_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_ref_x());
    }

    // optional uint32 thm_ref_y = 22;
    if (has_thm_ref_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_ref_y());
    }

    // optional uint32 thm_ref_height = 23;
    if (has_thm_ref_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_ref_height());
    }

    // optional uint32 thm_ref_width = 24;
    if (has_thm_ref_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_ref_width());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 te = 25;
    if (has_te()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->te());
    }

    // optional uint32 tr = 26;
    if (has_tr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tr());
    }

    // optional uint32 fa = 27;
    if (has_fa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fa());
    }

    // optional uint32 freq_encoding = 28;
    if (has_freq_encoding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freq_encoding());
    }

    // optional uint32 phase_encoding = 29;
    if (has_phase_encoding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_encoding());
    }

    // optional double nex = 30;
    if (has_nex()) {
      total_size += 2 + 8;
    }

    // optional double band_width = 31;
    if (has_band_width()) {
      total_size += 2 + 8;
    }

    // optional .FreqDirection freq_dir = 32;
    if (has_freq_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->freq_dir());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRESeq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRESeq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GRESeq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GRESeq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRESeq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRESeq)
    UnsafeMergeFrom(*source);
  }
}

void GRESeq::MergeFrom(const GRESeq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRESeq)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GRESeq::UnsafeMergeFrom(const GRESeq& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thm_calc()) {
      set_thm_calc(from.thm_calc());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_fov()) {
      set_fov(from.fov());
    }
    if (from.has_slice_thickness()) {
      set_slice_thickness(from.slice_thickness());
    }
    if (from.has_slice_spacing()) {
      set_slice_spacing(from.slice_spacing());
    }
    if (from.has_start_rl()) {
      set_start_rl(from.start_rl());
    }
    if (from.has_start_ap()) {
      set_start_ap(from.start_ap());
    }
    if (from.has_start_is()) {
      set_start_is(from.start_is());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_rl()) {
      set_end_rl(from.end_rl());
    }
    if (from.has_end_ap()) {
      set_end_ap(from.end_ap());
    }
    if (from.has_end_is()) {
      set_end_is(from.end_is());
    }
    if (from.has_slices()) {
      set_slices(from.slices());
    }
    if (from.has_phases()) {
      set_phases(from.phases());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_image_height()) {
      set_image_height(from.image_height());
    }
    if (from.has_image_width()) {
      set_image_width(from.image_width());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_thm_x()) {
      set_thm_x(from.thm_x());
    }
    if (from.has_thm_y()) {
      set_thm_y(from.thm_y());
    }
    if (from.has_thm_height()) {
      set_thm_height(from.thm_height());
    }
    if (from.has_thm_width()) {
      set_thm_width(from.thm_width());
    }
    if (from.has_thm_ref_x()) {
      set_thm_ref_x(from.thm_ref_x());
    }
    if (from.has_thm_ref_y()) {
      set_thm_ref_y(from.thm_ref_y());
    }
    if (from.has_thm_ref_height()) {
      set_thm_ref_height(from.thm_ref_height());
    }
    if (from.has_thm_ref_width()) {
      set_thm_ref_width(from.thm_ref_width());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_te()) {
      set_te(from.te());
    }
    if (from.has_tr()) {
      set_tr(from.tr());
    }
    if (from.has_fa()) {
      set_fa(from.fa());
    }
    if (from.has_freq_encoding()) {
      set_freq_encoding(from.freq_encoding());
    }
    if (from.has_phase_encoding()) {
      set_phase_encoding(from.phase_encoding());
    }
    if (from.has_nex()) {
      set_nex(from.nex());
    }
    if (from.has_band_width()) {
      set_band_width(from.band_width());
    }
    if (from.has_freq_dir()) {
      set_freq_dir(from.freq_dir());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GRESeq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRESeq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRESeq::CopyFrom(const GRESeq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRESeq)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GRESeq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void GRESeq::Swap(GRESeq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GRESeq::InternalSwap(GRESeq* other) {
  std::swap(thm_calc_, other->thm_calc_);
  std::swap(orientation_, other->orientation_);
  std::swap(fov_, other->fov_);
  std::swap(slice_thickness_, other->slice_thickness_);
  std::swap(slice_spacing_, other->slice_spacing_);
  std::swap(start_rl_, other->start_rl_);
  std::swap(start_ap_, other->start_ap_);
  std::swap(start_is_, other->start_is_);
  std::swap(end_rl_, other->end_rl_);
  std::swap(end_ap_, other->end_ap_);
  std::swap(end_is_, other->end_is_);
  std::swap(slices_, other->slices_);
  std::swap(phases_, other->phases_);
  std::swap(delay_, other->delay_);
  std::swap(image_height_, other->image_height_);
  std::swap(image_width_, other->image_width_);
  std::swap(thm_x_, other->thm_x_);
  std::swap(thm_y_, other->thm_y_);
  std::swap(thm_height_, other->thm_height_);
  std::swap(thm_width_, other->thm_width_);
  std::swap(thm_ref_x_, other->thm_ref_x_);
  std::swap(thm_ref_y_, other->thm_ref_y_);
  std::swap(thm_ref_height_, other->thm_ref_height_);
  std::swap(thm_ref_width_, other->thm_ref_width_);
  std::swap(te_, other->te_);
  std::swap(tr_, other->tr_);
  std::swap(fa_, other->fa_);
  std::swap(freq_encoding_, other->freq_encoding_);
  std::swap(phase_encoding_, other->phase_encoding_);
  std::swap(nex_, other->nex_);
  std::swap(band_width_, other->band_width_);
  std::swap(freq_dir_, other->freq_dir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GRESeq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRESeq_descriptor_;
  metadata.reflection = GRESeq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GRESeq

// required bool thm_calc = 1;
bool GRESeq::has_thm_calc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GRESeq::set_has_thm_calc() {
  _has_bits_[0] |= 0x00000001u;
}
void GRESeq::clear_has_thm_calc() {
  _has_bits_[0] &= ~0x00000001u;
}
void GRESeq::clear_thm_calc() {
  thm_calc_ = false;
  clear_has_thm_calc();
}
bool GRESeq::thm_calc() const {
  // @@protoc_insertion_point(field_get:GRESeq.thm_calc)
  return thm_calc_;
}
void GRESeq::set_thm_calc(bool value) {
  set_has_thm_calc();
  thm_calc_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.thm_calc)
}

// required .ScanOrient orientation = 2;
bool GRESeq::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GRESeq::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
void GRESeq::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
void GRESeq::clear_orientation() {
  orientation_ = 1;
  clear_has_orientation();
}
::ScanOrient GRESeq::orientation() const {
  // @@protoc_insertion_point(field_get:GRESeq.orientation)
  return static_cast< ::ScanOrient >(orientation_);
}
void GRESeq::set_orientation(::ScanOrient value) {
  assert(::ScanOrient_IsValid(value));
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.orientation)
}

// required uint32 fov = 3;
bool GRESeq::has_fov() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GRESeq::set_has_fov() {
  _has_bits_[0] |= 0x00000004u;
}
void GRESeq::clear_has_fov() {
  _has_bits_[0] &= ~0x00000004u;
}
void GRESeq::clear_fov() {
  fov_ = 0u;
  clear_has_fov();
}
::google::protobuf::uint32 GRESeq::fov() const {
  // @@protoc_insertion_point(field_get:GRESeq.fov)
  return fov_;
}
void GRESeq::set_fov(::google::protobuf::uint32 value) {
  set_has_fov();
  fov_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.fov)
}

// required double slice_thickness = 4;
bool GRESeq::has_slice_thickness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GRESeq::set_has_slice_thickness() {
  _has_bits_[0] |= 0x00000008u;
}
void GRESeq::clear_has_slice_thickness() {
  _has_bits_[0] &= ~0x00000008u;
}
void GRESeq::clear_slice_thickness() {
  slice_thickness_ = 0;
  clear_has_slice_thickness();
}
double GRESeq::slice_thickness() const {
  // @@protoc_insertion_point(field_get:GRESeq.slice_thickness)
  return slice_thickness_;
}
void GRESeq::set_slice_thickness(double value) {
  set_has_slice_thickness();
  slice_thickness_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.slice_thickness)
}

// required double slice_spacing = 5;
bool GRESeq::has_slice_spacing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GRESeq::set_has_slice_spacing() {
  _has_bits_[0] |= 0x00000010u;
}
void GRESeq::clear_has_slice_spacing() {
  _has_bits_[0] &= ~0x00000010u;
}
void GRESeq::clear_slice_spacing() {
  slice_spacing_ = 0;
  clear_has_slice_spacing();
}
double GRESeq::slice_spacing() const {
  // @@protoc_insertion_point(field_get:GRESeq.slice_spacing)
  return slice_spacing_;
}
void GRESeq::set_slice_spacing(double value) {
  set_has_slice_spacing();
  slice_spacing_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.slice_spacing)
}

// required double start_rl = 6;
bool GRESeq::has_start_rl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GRESeq::set_has_start_rl() {
  _has_bits_[0] |= 0x00000020u;
}
void GRESeq::clear_has_start_rl() {
  _has_bits_[0] &= ~0x00000020u;
}
void GRESeq::clear_start_rl() {
  start_rl_ = 0;
  clear_has_start_rl();
}
double GRESeq::start_rl() const {
  // @@protoc_insertion_point(field_get:GRESeq.start_rl)
  return start_rl_;
}
void GRESeq::set_start_rl(double value) {
  set_has_start_rl();
  start_rl_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.start_rl)
}

// required double start_ap = 7;
bool GRESeq::has_start_ap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GRESeq::set_has_start_ap() {
  _has_bits_[0] |= 0x00000040u;
}
void GRESeq::clear_has_start_ap() {
  _has_bits_[0] &= ~0x00000040u;
}
void GRESeq::clear_start_ap() {
  start_ap_ = 0;
  clear_has_start_ap();
}
double GRESeq::start_ap() const {
  // @@protoc_insertion_point(field_get:GRESeq.start_ap)
  return start_ap_;
}
void GRESeq::set_start_ap(double value) {
  set_has_start_ap();
  start_ap_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.start_ap)
}

// required double start_is = 8;
bool GRESeq::has_start_is() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GRESeq::set_has_start_is() {
  _has_bits_[0] |= 0x00000080u;
}
void GRESeq::clear_has_start_is() {
  _has_bits_[0] &= ~0x00000080u;
}
void GRESeq::clear_start_is() {
  start_is_ = 0;
  clear_has_start_is();
}
double GRESeq::start_is() const {
  // @@protoc_insertion_point(field_get:GRESeq.start_is)
  return start_is_;
}
void GRESeq::set_start_is(double value) {
  set_has_start_is();
  start_is_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.start_is)
}

// required double end_rl = 9;
bool GRESeq::has_end_rl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GRESeq::set_has_end_rl() {
  _has_bits_[0] |= 0x00000100u;
}
void GRESeq::clear_has_end_rl() {
  _has_bits_[0] &= ~0x00000100u;
}
void GRESeq::clear_end_rl() {
  end_rl_ = 0;
  clear_has_end_rl();
}
double GRESeq::end_rl() const {
  // @@protoc_insertion_point(field_get:GRESeq.end_rl)
  return end_rl_;
}
void GRESeq::set_end_rl(double value) {
  set_has_end_rl();
  end_rl_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.end_rl)
}

// required double end_ap = 10;
bool GRESeq::has_end_ap() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GRESeq::set_has_end_ap() {
  _has_bits_[0] |= 0x00000200u;
}
void GRESeq::clear_has_end_ap() {
  _has_bits_[0] &= ~0x00000200u;
}
void GRESeq::clear_end_ap() {
  end_ap_ = 0;
  clear_has_end_ap();
}
double GRESeq::end_ap() const {
  // @@protoc_insertion_point(field_get:GRESeq.end_ap)
  return end_ap_;
}
void GRESeq::set_end_ap(double value) {
  set_has_end_ap();
  end_ap_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.end_ap)
}

// required double end_is = 11;
bool GRESeq::has_end_is() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GRESeq::set_has_end_is() {
  _has_bits_[0] |= 0x00000400u;
}
void GRESeq::clear_has_end_is() {
  _has_bits_[0] &= ~0x00000400u;
}
void GRESeq::clear_end_is() {
  end_is_ = 0;
  clear_has_end_is();
}
double GRESeq::end_is() const {
  // @@protoc_insertion_point(field_get:GRESeq.end_is)
  return end_is_;
}
void GRESeq::set_end_is(double value) {
  set_has_end_is();
  end_is_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.end_is)
}

// required uint32 slices = 12;
bool GRESeq::has_slices() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GRESeq::set_has_slices() {
  _has_bits_[0] |= 0x00000800u;
}
void GRESeq::clear_has_slices() {
  _has_bits_[0] &= ~0x00000800u;
}
void GRESeq::clear_slices() {
  slices_ = 0u;
  clear_has_slices();
}
::google::protobuf::uint32 GRESeq::slices() const {
  // @@protoc_insertion_point(field_get:GRESeq.slices)
  return slices_;
}
void GRESeq::set_slices(::google::protobuf::uint32 value) {
  set_has_slices();
  slices_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.slices)
}

// required uint32 phases = 13;
bool GRESeq::has_phases() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GRESeq::set_has_phases() {
  _has_bits_[0] |= 0x00001000u;
}
void GRESeq::clear_has_phases() {
  _has_bits_[0] &= ~0x00001000u;
}
void GRESeq::clear_phases() {
  phases_ = 0u;
  clear_has_phases();
}
::google::protobuf::uint32 GRESeq::phases() const {
  // @@protoc_insertion_point(field_get:GRESeq.phases)
  return phases_;
}
void GRESeq::set_phases(::google::protobuf::uint32 value) {
  set_has_phases();
  phases_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.phases)
}

// required double delay = 14;
bool GRESeq::has_delay() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GRESeq::set_has_delay() {
  _has_bits_[0] |= 0x00002000u;
}
void GRESeq::clear_has_delay() {
  _has_bits_[0] &= ~0x00002000u;
}
void GRESeq::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
double GRESeq::delay() const {
  // @@protoc_insertion_point(field_get:GRESeq.delay)
  return delay_;
}
void GRESeq::set_delay(double value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.delay)
}

// required uint32 image_height = 15;
bool GRESeq::has_image_height() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void GRESeq::set_has_image_height() {
  _has_bits_[0] |= 0x00004000u;
}
void GRESeq::clear_has_image_height() {
  _has_bits_[0] &= ~0x00004000u;
}
void GRESeq::clear_image_height() {
  image_height_ = 0u;
  clear_has_image_height();
}
::google::protobuf::uint32 GRESeq::image_height() const {
  // @@protoc_insertion_point(field_get:GRESeq.image_height)
  return image_height_;
}
void GRESeq::set_image_height(::google::protobuf::uint32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.image_height)
}

// required uint32 image_width = 16;
bool GRESeq::has_image_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void GRESeq::set_has_image_width() {
  _has_bits_[0] |= 0x00008000u;
}
void GRESeq::clear_has_image_width() {
  _has_bits_[0] &= ~0x00008000u;
}
void GRESeq::clear_image_width() {
  image_width_ = 0u;
  clear_has_image_width();
}
::google::protobuf::uint32 GRESeq::image_width() const {
  // @@protoc_insertion_point(field_get:GRESeq.image_width)
  return image_width_;
}
void GRESeq::set_image_width(::google::protobuf::uint32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.image_width)
}

// optional uint32 thm_x = 17;
bool GRESeq::has_thm_x() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void GRESeq::set_has_thm_x() {
  _has_bits_[0] |= 0x00010000u;
}
void GRESeq::clear_has_thm_x() {
  _has_bits_[0] &= ~0x00010000u;
}
void GRESeq::clear_thm_x() {
  thm_x_ = 0u;
  clear_has_thm_x();
}
::google::protobuf::uint32 GRESeq::thm_x() const {
  // @@protoc_insertion_point(field_get:GRESeq.thm_x)
  return thm_x_;
}
void GRESeq::set_thm_x(::google::protobuf::uint32 value) {
  set_has_thm_x();
  thm_x_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.thm_x)
}

// optional uint32 thm_y = 18;
bool GRESeq::has_thm_y() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void GRESeq::set_has_thm_y() {
  _has_bits_[0] |= 0x00020000u;
}
void GRESeq::clear_has_thm_y() {
  _has_bits_[0] &= ~0x00020000u;
}
void GRESeq::clear_thm_y() {
  thm_y_ = 0u;
  clear_has_thm_y();
}
::google::protobuf::uint32 GRESeq::thm_y() const {
  // @@protoc_insertion_point(field_get:GRESeq.thm_y)
  return thm_y_;
}
void GRESeq::set_thm_y(::google::protobuf::uint32 value) {
  set_has_thm_y();
  thm_y_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.thm_y)
}

// optional uint32 thm_height = 19;
bool GRESeq::has_thm_height() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void GRESeq::set_has_thm_height() {
  _has_bits_[0] |= 0x00040000u;
}
void GRESeq::clear_has_thm_height() {
  _has_bits_[0] &= ~0x00040000u;
}
void GRESeq::clear_thm_height() {
  thm_height_ = 0u;
  clear_has_thm_height();
}
::google::protobuf::uint32 GRESeq::thm_height() const {
  // @@protoc_insertion_point(field_get:GRESeq.thm_height)
  return thm_height_;
}
void GRESeq::set_thm_height(::google::protobuf::uint32 value) {
  set_has_thm_height();
  thm_height_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.thm_height)
}

// optional uint32 thm_width = 20;
bool GRESeq::has_thm_width() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void GRESeq::set_has_thm_width() {
  _has_bits_[0] |= 0x00080000u;
}
void GRESeq::clear_has_thm_width() {
  _has_bits_[0] &= ~0x00080000u;
}
void GRESeq::clear_thm_width() {
  thm_width_ = 0u;
  clear_has_thm_width();
}
::google::protobuf::uint32 GRESeq::thm_width() const {
  // @@protoc_insertion_point(field_get:GRESeq.thm_width)
  return thm_width_;
}
void GRESeq::set_thm_width(::google::protobuf::uint32 value) {
  set_has_thm_width();
  thm_width_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.thm_width)
}

// optional uint32 thm_ref_x = 21;
bool GRESeq::has_thm_ref_x() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void GRESeq::set_has_thm_ref_x() {
  _has_bits_[0] |= 0x00100000u;
}
void GRESeq::clear_has_thm_ref_x() {
  _has_bits_[0] &= ~0x00100000u;
}
void GRESeq::clear_thm_ref_x() {
  thm_ref_x_ = 0u;
  clear_has_thm_ref_x();
}
::google::protobuf::uint32 GRESeq::thm_ref_x() const {
  // @@protoc_insertion_point(field_get:GRESeq.thm_ref_x)
  return thm_ref_x_;
}
void GRESeq::set_thm_ref_x(::google::protobuf::uint32 value) {
  set_has_thm_ref_x();
  thm_ref_x_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.thm_ref_x)
}

// optional uint32 thm_ref_y = 22;
bool GRESeq::has_thm_ref_y() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void GRESeq::set_has_thm_ref_y() {
  _has_bits_[0] |= 0x00200000u;
}
void GRESeq::clear_has_thm_ref_y() {
  _has_bits_[0] &= ~0x00200000u;
}
void GRESeq::clear_thm_ref_y() {
  thm_ref_y_ = 0u;
  clear_has_thm_ref_y();
}
::google::protobuf::uint32 GRESeq::thm_ref_y() const {
  // @@protoc_insertion_point(field_get:GRESeq.thm_ref_y)
  return thm_ref_y_;
}
void GRESeq::set_thm_ref_y(::google::protobuf::uint32 value) {
  set_has_thm_ref_y();
  thm_ref_y_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.thm_ref_y)
}

// optional uint32 thm_ref_height = 23;
bool GRESeq::has_thm_ref_height() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void GRESeq::set_has_thm_ref_height() {
  _has_bits_[0] |= 0x00400000u;
}
void GRESeq::clear_has_thm_ref_height() {
  _has_bits_[0] &= ~0x00400000u;
}
void GRESeq::clear_thm_ref_height() {
  thm_ref_height_ = 0u;
  clear_has_thm_ref_height();
}
::google::protobuf::uint32 GRESeq::thm_ref_height() const {
  // @@protoc_insertion_point(field_get:GRESeq.thm_ref_height)
  return thm_ref_height_;
}
void GRESeq::set_thm_ref_height(::google::protobuf::uint32 value) {
  set_has_thm_ref_height();
  thm_ref_height_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.thm_ref_height)
}

// optional uint32 thm_ref_width = 24;
bool GRESeq::has_thm_ref_width() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void GRESeq::set_has_thm_ref_width() {
  _has_bits_[0] |= 0x00800000u;
}
void GRESeq::clear_has_thm_ref_width() {
  _has_bits_[0] &= ~0x00800000u;
}
void GRESeq::clear_thm_ref_width() {
  thm_ref_width_ = 0u;
  clear_has_thm_ref_width();
}
::google::protobuf::uint32 GRESeq::thm_ref_width() const {
  // @@protoc_insertion_point(field_get:GRESeq.thm_ref_width)
  return thm_ref_width_;
}
void GRESeq::set_thm_ref_width(::google::protobuf::uint32 value) {
  set_has_thm_ref_width();
  thm_ref_width_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.thm_ref_width)
}

// optional uint32 te = 25;
bool GRESeq::has_te() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void GRESeq::set_has_te() {
  _has_bits_[0] |= 0x01000000u;
}
void GRESeq::clear_has_te() {
  _has_bits_[0] &= ~0x01000000u;
}
void GRESeq::clear_te() {
  te_ = 0u;
  clear_has_te();
}
::google::protobuf::uint32 GRESeq::te() const {
  // @@protoc_insertion_point(field_get:GRESeq.te)
  return te_;
}
void GRESeq::set_te(::google::protobuf::uint32 value) {
  set_has_te();
  te_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.te)
}

// optional uint32 tr = 26;
bool GRESeq::has_tr() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void GRESeq::set_has_tr() {
  _has_bits_[0] |= 0x02000000u;
}
void GRESeq::clear_has_tr() {
  _has_bits_[0] &= ~0x02000000u;
}
void GRESeq::clear_tr() {
  tr_ = 0u;
  clear_has_tr();
}
::google::protobuf::uint32 GRESeq::tr() const {
  // @@protoc_insertion_point(field_get:GRESeq.tr)
  return tr_;
}
void GRESeq::set_tr(::google::protobuf::uint32 value) {
  set_has_tr();
  tr_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.tr)
}

// optional uint32 fa = 27;
bool GRESeq::has_fa() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void GRESeq::set_has_fa() {
  _has_bits_[0] |= 0x04000000u;
}
void GRESeq::clear_has_fa() {
  _has_bits_[0] &= ~0x04000000u;
}
void GRESeq::clear_fa() {
  fa_ = 0u;
  clear_has_fa();
}
::google::protobuf::uint32 GRESeq::fa() const {
  // @@protoc_insertion_point(field_get:GRESeq.fa)
  return fa_;
}
void GRESeq::set_fa(::google::protobuf::uint32 value) {
  set_has_fa();
  fa_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.fa)
}

// optional uint32 freq_encoding = 28;
bool GRESeq::has_freq_encoding() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void GRESeq::set_has_freq_encoding() {
  _has_bits_[0] |= 0x08000000u;
}
void GRESeq::clear_has_freq_encoding() {
  _has_bits_[0] &= ~0x08000000u;
}
void GRESeq::clear_freq_encoding() {
  freq_encoding_ = 0u;
  clear_has_freq_encoding();
}
::google::protobuf::uint32 GRESeq::freq_encoding() const {
  // @@protoc_insertion_point(field_get:GRESeq.freq_encoding)
  return freq_encoding_;
}
void GRESeq::set_freq_encoding(::google::protobuf::uint32 value) {
  set_has_freq_encoding();
  freq_encoding_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.freq_encoding)
}

// optional uint32 phase_encoding = 29;
bool GRESeq::has_phase_encoding() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void GRESeq::set_has_phase_encoding() {
  _has_bits_[0] |= 0x10000000u;
}
void GRESeq::clear_has_phase_encoding() {
  _has_bits_[0] &= ~0x10000000u;
}
void GRESeq::clear_phase_encoding() {
  phase_encoding_ = 0u;
  clear_has_phase_encoding();
}
::google::protobuf::uint32 GRESeq::phase_encoding() const {
  // @@protoc_insertion_point(field_get:GRESeq.phase_encoding)
  return phase_encoding_;
}
void GRESeq::set_phase_encoding(::google::protobuf::uint32 value) {
  set_has_phase_encoding();
  phase_encoding_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.phase_encoding)
}

// optional double nex = 30;
bool GRESeq::has_nex() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void GRESeq::set_has_nex() {
  _has_bits_[0] |= 0x20000000u;
}
void GRESeq::clear_has_nex() {
  _has_bits_[0] &= ~0x20000000u;
}
void GRESeq::clear_nex() {
  nex_ = 0;
  clear_has_nex();
}
double GRESeq::nex() const {
  // @@protoc_insertion_point(field_get:GRESeq.nex)
  return nex_;
}
void GRESeq::set_nex(double value) {
  set_has_nex();
  nex_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.nex)
}

// optional double band_width = 31;
bool GRESeq::has_band_width() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void GRESeq::set_has_band_width() {
  _has_bits_[0] |= 0x40000000u;
}
void GRESeq::clear_has_band_width() {
  _has_bits_[0] &= ~0x40000000u;
}
void GRESeq::clear_band_width() {
  band_width_ = 0;
  clear_has_band_width();
}
double GRESeq::band_width() const {
  // @@protoc_insertion_point(field_get:GRESeq.band_width)
  return band_width_;
}
void GRESeq::set_band_width(double value) {
  set_has_band_width();
  band_width_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.band_width)
}

// optional .FreqDirection freq_dir = 32;
bool GRESeq::has_freq_dir() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void GRESeq::set_has_freq_dir() {
  _has_bits_[0] |= 0x80000000u;
}
void GRESeq::clear_has_freq_dir() {
  _has_bits_[0] &= ~0x80000000u;
}
void GRESeq::clear_freq_dir() {
  freq_dir_ = 1;
  clear_has_freq_dir();
}
::FreqDirection GRESeq::freq_dir() const {
  // @@protoc_insertion_point(field_get:GRESeq.freq_dir)
  return static_cast< ::FreqDirection >(freq_dir_);
}
void GRESeq::set_freq_dir(::FreqDirection value) {
  assert(::FreqDirection_IsValid(value));
  set_has_freq_dir();
  freq_dir_ = value;
  // @@protoc_insertion_point(field_set:GRESeq.freq_dir)
}

inline const GRESeq* GRESeq::internal_default_instance() {
  return &GRESeq_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MRStatusQueryPb_MRStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MRStatusQueryPb_MRStatus_descriptor_;
}
bool MRStatusQueryPb_MRStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MRStatusQueryPb_MRStatus MRStatusQueryPb::NORMAL;
const MRStatusQueryPb_MRStatus MRStatusQueryPb::ABNORMAL;
const MRStatusQueryPb_MRStatus MRStatusQueryPb::MRStatus_MIN;
const MRStatusQueryPb_MRStatus MRStatusQueryPb::MRStatus_MAX;
const int MRStatusQueryPb::MRStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MRStatusQueryPb::kMsgTypeFieldNumber;
const int MRStatusQueryPb::kDateTimeFieldNumber;
const int MRStatusQueryPb::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MRStatusQueryPb::MRStatusQueryPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mrgfus_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MRStatusQueryPb)
}

void MRStatusQueryPb::InitAsDefaultInstance() {
}

MRStatusQueryPb::MRStatusQueryPb(const MRStatusQueryPb& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MRStatusQueryPb)
}

void MRStatusQueryPb::SharedCtor() {
  _cached_size_ = 0;
  date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_ = 1;
  status_ = 1;
}

MRStatusQueryPb::~MRStatusQueryPb() {
  // @@protoc_insertion_point(destructor:MRStatusQueryPb)
  SharedDtor();
}

void MRStatusQueryPb::SharedDtor() {
  date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MRStatusQueryPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MRStatusQueryPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MRStatusQueryPb_descriptor_;
}

const MRStatusQueryPb& MRStatusQueryPb::default_instance() {
  protobuf_InitDefaults_mrgfus_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MRStatusQueryPb> MRStatusQueryPb_default_instance_;

MRStatusQueryPb* MRStatusQueryPb::New(::google::protobuf::Arena* arena) const {
  MRStatusQueryPb* n = new MRStatusQueryPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MRStatusQueryPb::Clear() {
// @@protoc_insertion_point(message_clear_start:MRStatusQueryPb)
  if (_has_bits_[0 / 32] & 7u) {
    msg_type_ = 1;
    if (has_date_time()) {
      date_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MRStatusQueryPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MRStatusQueryPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date_time;
        break;
      }

      // required string date_time = 2;
      case 2: {
        if (tag == 18) {
         parse_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date_time().data(), this->date_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MRStatusQueryPb.date_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .MRStatusQueryPb.MRStatus status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MRStatusQueryPb_MRStatus_IsValid(value)) {
            set_status(static_cast< ::MRStatusQueryPb_MRStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MRStatusQueryPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MRStatusQueryPb)
  return false;
#undef DO_
}

void MRStatusQueryPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MRStatusQueryPb)
  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required string date_time = 2;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MRStatusQueryPb.date_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date_time(), output);
  }

  // optional .MRStatusQueryPb.MRStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MRStatusQueryPb)
}

::google::protobuf::uint8* MRStatusQueryPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MRStatusQueryPb)
  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required string date_time = 2;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MRStatusQueryPb.date_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date_time(), target);
  }

  // optional .MRStatusQueryPb.MRStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MRStatusQueryPb)
  return target;
}

size_t MRStatusQueryPb::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MRStatusQueryPb)
  size_t total_size = 0;

  if (has_msg_type()) {
    // required .MsgType msg_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  if (has_date_time()) {
    // required string date_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date_time());
  }

  return total_size;
}
size_t MRStatusQueryPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MRStatusQueryPb)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .MsgType msg_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());

    // required string date_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .MRStatusQueryPb.MRStatus status = 3;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MRStatusQueryPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MRStatusQueryPb)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MRStatusQueryPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MRStatusQueryPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MRStatusQueryPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MRStatusQueryPb)
    UnsafeMergeFrom(*source);
  }
}

void MRStatusQueryPb::MergeFrom(const MRStatusQueryPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MRStatusQueryPb)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MRStatusQueryPb::UnsafeMergeFrom(const MRStatusQueryPb& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_date_time()) {
      set_has_date_time();
      date_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_time_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MRStatusQueryPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MRStatusQueryPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MRStatusQueryPb::CopyFrom(const MRStatusQueryPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MRStatusQueryPb)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MRStatusQueryPb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MRStatusQueryPb::Swap(MRStatusQueryPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MRStatusQueryPb::InternalSwap(MRStatusQueryPb* other) {
  std::swap(msg_type_, other->msg_type_);
  date_time_.Swap(&other->date_time_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MRStatusQueryPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MRStatusQueryPb_descriptor_;
  metadata.reflection = MRStatusQueryPb_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MRStatusQueryPb

// required .MsgType msg_type = 1;
bool MRStatusQueryPb::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MRStatusQueryPb::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MRStatusQueryPb::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MRStatusQueryPb::clear_msg_type() {
  msg_type_ = 1;
  clear_has_msg_type();
}
::MsgType MRStatusQueryPb::msg_type() const {
  // @@protoc_insertion_point(field_get:MRStatusQueryPb.msg_type)
  return static_cast< ::MsgType >(msg_type_);
}
void MRStatusQueryPb::set_msg_type(::MsgType value) {
  assert(::MsgType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:MRStatusQueryPb.msg_type)
}

// required string date_time = 2;
bool MRStatusQueryPb::has_date_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MRStatusQueryPb::set_has_date_time() {
  _has_bits_[0] |= 0x00000002u;
}
void MRStatusQueryPb::clear_has_date_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void MRStatusQueryPb::clear_date_time() {
  date_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date_time();
}
const ::std::string& MRStatusQueryPb::date_time() const {
  // @@protoc_insertion_point(field_get:MRStatusQueryPb.date_time)
  return date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MRStatusQueryPb::set_date_time(const ::std::string& value) {
  set_has_date_time();
  date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MRStatusQueryPb.date_time)
}
void MRStatusQueryPb::set_date_time(const char* value) {
  set_has_date_time();
  date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MRStatusQueryPb.date_time)
}
void MRStatusQueryPb::set_date_time(const char* value, size_t size) {
  set_has_date_time();
  date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MRStatusQueryPb.date_time)
}
::std::string* MRStatusQueryPb::mutable_date_time() {
  set_has_date_time();
  // @@protoc_insertion_point(field_mutable:MRStatusQueryPb.date_time)
  return date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MRStatusQueryPb::release_date_time() {
  // @@protoc_insertion_point(field_release:MRStatusQueryPb.date_time)
  clear_has_date_time();
  return date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MRStatusQueryPb::set_allocated_date_time(::std::string* date_time) {
  if (date_time != NULL) {
    set_has_date_time();
  } else {
    clear_has_date_time();
  }
  date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date_time);
  // @@protoc_insertion_point(field_set_allocated:MRStatusQueryPb.date_time)
}

// optional .MRStatusQueryPb.MRStatus status = 3;
bool MRStatusQueryPb::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MRStatusQueryPb::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void MRStatusQueryPb::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void MRStatusQueryPb::clear_status() {
  status_ = 1;
  clear_has_status();
}
::MRStatusQueryPb_MRStatus MRStatusQueryPb::status() const {
  // @@protoc_insertion_point(field_get:MRStatusQueryPb.status)
  return static_cast< ::MRStatusQueryPb_MRStatus >(status_);
}
void MRStatusQueryPb::set_status(::MRStatusQueryPb_MRStatus value) {
  assert(::MRStatusQueryPb_MRStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:MRStatusQueryPb.status)
}

inline const MRStatusQueryPb* MRStatusQueryPb::internal_default_instance() {
  return &MRStatusQueryPb_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MRStatusNotifyPb_MRStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MRStatusNotifyPb_MRStatus_descriptor_;
}
bool MRStatusNotifyPb_MRStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MRStatusNotifyPb_MRStatus MRStatusNotifyPb::ABNORMAL;
const MRStatusNotifyPb_MRStatus MRStatusNotifyPb::SCAN_INTERRUPT;
const MRStatusNotifyPb_MRStatus MRStatusNotifyPb::MRStatus_MIN;
const MRStatusNotifyPb_MRStatus MRStatusNotifyPb::MRStatus_MAX;
const int MRStatusNotifyPb::MRStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MRStatusNotifyPb::kMsgTypeFieldNumber;
const int MRStatusNotifyPb::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MRStatusNotifyPb::MRStatusNotifyPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mrgfus_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MRStatusNotifyPb)
}

void MRStatusNotifyPb::InitAsDefaultInstance() {
}

MRStatusNotifyPb::MRStatusNotifyPb(const MRStatusNotifyPb& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MRStatusNotifyPb)
}

void MRStatusNotifyPb::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 1;
  status_ = 1;
}

MRStatusNotifyPb::~MRStatusNotifyPb() {
  // @@protoc_insertion_point(destructor:MRStatusNotifyPb)
  SharedDtor();
}

void MRStatusNotifyPb::SharedDtor() {
}

void MRStatusNotifyPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MRStatusNotifyPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MRStatusNotifyPb_descriptor_;
}

const MRStatusNotifyPb& MRStatusNotifyPb::default_instance() {
  protobuf_InitDefaults_mrgfus_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MRStatusNotifyPb> MRStatusNotifyPb_default_instance_;

MRStatusNotifyPb* MRStatusNotifyPb::New(::google::protobuf::Arena* arena) const {
  MRStatusNotifyPb* n = new MRStatusNotifyPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MRStatusNotifyPb::Clear() {
// @@protoc_insertion_point(message_clear_start:MRStatusNotifyPb)
  if (_has_bits_[0 / 32] & 3u) {
    msg_type_ = 1;
    status_ = 1;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MRStatusNotifyPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MRStatusNotifyPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .MRStatusNotifyPb.MRStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MRStatusNotifyPb_MRStatus_IsValid(value)) {
            set_status(static_cast< ::MRStatusNotifyPb_MRStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MRStatusNotifyPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MRStatusNotifyPb)
  return false;
#undef DO_
}

void MRStatusNotifyPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MRStatusNotifyPb)
  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional .MRStatusNotifyPb.MRStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MRStatusNotifyPb)
}

::google::protobuf::uint8* MRStatusNotifyPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MRStatusNotifyPb)
  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional .MRStatusNotifyPb.MRStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MRStatusNotifyPb)
  return target;
}

size_t MRStatusNotifyPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MRStatusNotifyPb)
  size_t total_size = 0;

  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }
  // optional .MRStatusNotifyPb.MRStatus status = 2;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MRStatusNotifyPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MRStatusNotifyPb)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MRStatusNotifyPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MRStatusNotifyPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MRStatusNotifyPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MRStatusNotifyPb)
    UnsafeMergeFrom(*source);
  }
}

void MRStatusNotifyPb::MergeFrom(const MRStatusNotifyPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MRStatusNotifyPb)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MRStatusNotifyPb::UnsafeMergeFrom(const MRStatusNotifyPb& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MRStatusNotifyPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MRStatusNotifyPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MRStatusNotifyPb::CopyFrom(const MRStatusNotifyPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MRStatusNotifyPb)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MRStatusNotifyPb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MRStatusNotifyPb::Swap(MRStatusNotifyPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MRStatusNotifyPb::InternalSwap(MRStatusNotifyPb* other) {
  std::swap(msg_type_, other->msg_type_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MRStatusNotifyPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MRStatusNotifyPb_descriptor_;
  metadata.reflection = MRStatusNotifyPb_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MRStatusNotifyPb

// required .MsgType msg_type = 1;
bool MRStatusNotifyPb::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MRStatusNotifyPb::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MRStatusNotifyPb::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MRStatusNotifyPb::clear_msg_type() {
  msg_type_ = 1;
  clear_has_msg_type();
}
::MsgType MRStatusNotifyPb::msg_type() const {
  // @@protoc_insertion_point(field_get:MRStatusNotifyPb.msg_type)
  return static_cast< ::MsgType >(msg_type_);
}
void MRStatusNotifyPb::set_msg_type(::MsgType value) {
  assert(::MsgType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:MRStatusNotifyPb.msg_type)
}

// optional .MRStatusNotifyPb.MRStatus status = 2;
bool MRStatusNotifyPb::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MRStatusNotifyPb::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void MRStatusNotifyPb::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void MRStatusNotifyPb::clear_status() {
  status_ = 1;
  clear_has_status();
}
::MRStatusNotifyPb_MRStatus MRStatusNotifyPb::status() const {
  // @@protoc_insertion_point(field_get:MRStatusNotifyPb.status)
  return static_cast< ::MRStatusNotifyPb_MRStatus >(status_);
}
void MRStatusNotifyPb::set_status(::MRStatusNotifyPb_MRStatus value) {
  assert(::MRStatusNotifyPb_MRStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:MRStatusNotifyPb.status)
}

inline const MRStatusNotifyPb* MRStatusNotifyPb::internal_default_instance() {
  return &MRStatusNotifyPb_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManuScanPb::kMsgTypeFieldNumber;
const int ManuScanPb::kResultFieldNumber;
const int ManuScanPb::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManuScanPb::ManuScanPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mrgfus_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManuScanPb)
}

void ManuScanPb::InitAsDefaultInstance() {
}

ManuScanPb::ManuScanPb(const ManuScanPb& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ManuScanPb)
}

void ManuScanPb::SharedCtor() {
  _cached_size_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_ = 1;
  result_ = 1;
}

ManuScanPb::~ManuScanPb() {
  // @@protoc_insertion_point(destructor:ManuScanPb)
  SharedDtor();
}

void ManuScanPb::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManuScanPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManuScanPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManuScanPb_descriptor_;
}

const ManuScanPb& ManuScanPb::default_instance() {
  protobuf_InitDefaults_mrgfus_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ManuScanPb> ManuScanPb_default_instance_;

ManuScanPb* ManuScanPb::New(::google::protobuf::Arena* arena) const {
  ManuScanPb* n = new ManuScanPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManuScanPb::Clear() {
// @@protoc_insertion_point(message_clear_start:ManuScanPb)
  if (_has_bits_[0 / 32] & 7u) {
    msg_type_ = 1;
    result_ = 1;
    if (has_error_msg()) {
      error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ManuScanPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManuScanPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .ExecResult result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExecResult_IsValid(value)) {
            set_result(static_cast< ::ExecResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManuScanPb.error_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManuScanPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManuScanPb)
  return false;
#undef DO_
}

void ManuScanPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManuScanPb)
  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional .ExecResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string error_msg = 3;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManuScanPb.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManuScanPb)
}

::google::protobuf::uint8* ManuScanPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ManuScanPb)
  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional .ExecResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string error_msg = 3;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManuScanPb.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManuScanPb)
  return target;
}

size_t ManuScanPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManuScanPb)
  size_t total_size = 0;

  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional .ExecResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string error_msg = 3;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManuScanPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManuScanPb)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ManuScanPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManuScanPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManuScanPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManuScanPb)
    UnsafeMergeFrom(*source);
  }
}

void ManuScanPb::MergeFrom(const ManuScanPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManuScanPb)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ManuScanPb::UnsafeMergeFrom(const ManuScanPb& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error_msg()) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ManuScanPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManuScanPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManuScanPb::CopyFrom(const ManuScanPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManuScanPb)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ManuScanPb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ManuScanPb::Swap(ManuScanPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManuScanPb::InternalSwap(ManuScanPb* other) {
  std::swap(msg_type_, other->msg_type_);
  std::swap(result_, other->result_);
  error_msg_.Swap(&other->error_msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManuScanPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManuScanPb_descriptor_;
  metadata.reflection = ManuScanPb_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManuScanPb

// required .MsgType msg_type = 1;
bool ManuScanPb::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManuScanPb::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ManuScanPb::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManuScanPb::clear_msg_type() {
  msg_type_ = 1;
  clear_has_msg_type();
}
::MsgType ManuScanPb::msg_type() const {
  // @@protoc_insertion_point(field_get:ManuScanPb.msg_type)
  return static_cast< ::MsgType >(msg_type_);
}
void ManuScanPb::set_msg_type(::MsgType value) {
  assert(::MsgType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:ManuScanPb.msg_type)
}

// optional .ExecResult result = 2;
bool ManuScanPb::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManuScanPb::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void ManuScanPb::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManuScanPb::clear_result() {
  result_ = 1;
  clear_has_result();
}
::ExecResult ManuScanPb::result() const {
  // @@protoc_insertion_point(field_get:ManuScanPb.result)
  return static_cast< ::ExecResult >(result_);
}
void ManuScanPb::set_result(::ExecResult value) {
  assert(::ExecResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:ManuScanPb.result)
}

// optional string error_msg = 3;
bool ManuScanPb::has_error_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManuScanPb::set_has_error_msg() {
  _has_bits_[0] |= 0x00000004u;
}
void ManuScanPb::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManuScanPb::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
const ::std::string& ManuScanPb::error_msg() const {
  // @@protoc_insertion_point(field_get:ManuScanPb.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManuScanPb::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManuScanPb.error_msg)
}
void ManuScanPb::set_error_msg(const char* value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManuScanPb.error_msg)
}
void ManuScanPb::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManuScanPb.error_msg)
}
::std::string* ManuScanPb::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:ManuScanPb.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManuScanPb::release_error_msg() {
  // @@protoc_insertion_point(field_release:ManuScanPb.error_msg)
  clear_has_error_msg();
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManuScanPb::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:ManuScanPb.error_msg)
}

inline const ManuScanPb* ManuScanPb::internal_default_instance() {
  return &ManuScanPb_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoScanPb::kMsgTypeFieldNumber;
const int AutoScanPb::kSeqTypeFieldNumber;
const int AutoScanPb::kResultFieldNumber;
const int AutoScanPb::kErrorMsgFieldNumber;
const int AutoScanPb::kSeFieldNumber;
const int AutoScanPb::kGreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoScanPb::AutoScanPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mrgfus_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:AutoScanPb)
}

void AutoScanPb::InitAsDefaultInstance() {
  se_ = const_cast< ::SESeq*>(
      ::SESeq::internal_default_instance());
  gre_ = const_cast< ::GRESeq*>(
      ::GRESeq::internal_default_instance());
}

AutoScanPb::AutoScanPb(const AutoScanPb& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AutoScanPb)
}

void AutoScanPb::SharedCtor() {
  _cached_size_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  se_ = NULL;
  gre_ = NULL;
  result_ = 1;
  msg_type_ = 1;
  seq_type_ = 1;
}

AutoScanPb::~AutoScanPb() {
  // @@protoc_insertion_point(destructor:AutoScanPb)
  SharedDtor();
}

void AutoScanPb::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &AutoScanPb_default_instance_.get()) {
    delete se_;
    delete gre_;
  }
}

void AutoScanPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoScanPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoScanPb_descriptor_;
}

const AutoScanPb& AutoScanPb::default_instance() {
  protobuf_InitDefaults_mrgfus_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AutoScanPb> AutoScanPb_default_instance_;

AutoScanPb* AutoScanPb::New(::google::protobuf::Arena* arena) const {
  AutoScanPb* n = new AutoScanPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoScanPb::Clear() {
// @@protoc_insertion_point(message_clear_start:AutoScanPb)
  if (_has_bits_[0 / 32] & 63u) {
    msg_type_ = 1;
    seq_type_ = 1;
    result_ = 1;
    if (has_error_msg()) {
      error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_se()) {
      if (se_ != NULL) se_->::SESeq::Clear();
    }
    if (has_gre()) {
      if (gre_ != NULL) gre_->::GRESeq::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AutoScanPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AutoScanPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq_type;
        break;
      }

      // optional .SeqType seq_type = 2;
      case 2: {
        if (tag == 16) {
         parse_seq_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SeqType_IsValid(value)) {
            set_seq_type(static_cast< ::SeqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .ExecResult result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExecResult_IsValid(value)) {
            set_result(static_cast< ::ExecResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AutoScanPb.error_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_se;
        break;
      }

      // optional .SESeq se = 5;
      case 5: {
        if (tag == 42) {
         parse_se:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_se()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gre;
        break;
      }

      // optional .GRESeq gre = 6;
      case 6: {
        if (tag == 50) {
         parse_gre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gre()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AutoScanPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AutoScanPb)
  return false;
#undef DO_
}

void AutoScanPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AutoScanPb)
  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional .SeqType seq_type = 2;
  if (has_seq_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->seq_type(), output);
  }

  // optional .ExecResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // optional string error_msg = 4;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AutoScanPb.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error_msg(), output);
  }

  // optional .SESeq se = 5;
  if (has_se()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->se_, output);
  }

  // optional .GRESeq gre = 6;
  if (has_gre()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->gre_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AutoScanPb)
}

::google::protobuf::uint8* AutoScanPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AutoScanPb)
  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional .SeqType seq_type = 2;
  if (has_seq_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->seq_type(), target);
  }

  // optional .ExecResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // optional string error_msg = 4;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AutoScanPb.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_msg(), target);
  }

  // optional .SESeq se = 5;
  if (has_se()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->se_, false, target);
  }

  // optional .GRESeq gre = 6;
  if (has_gre()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->gre_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AutoScanPb)
  return target;
}

size_t AutoScanPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AutoScanPb)
  size_t total_size = 0;

  // required .MsgType msg_type = 1;
  if (has_msg_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }
  if (_has_bits_[1 / 32] & 62u) {
    // optional .SeqType seq_type = 2;
    if (has_seq_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->seq_type());
    }

    // optional .ExecResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string error_msg = 4;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // optional .SESeq se = 5;
    if (has_se()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->se_);
    }

    // optional .GRESeq gre = 6;
    if (has_gre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gre_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoScanPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AutoScanPb)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AutoScanPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoScanPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AutoScanPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AutoScanPb)
    UnsafeMergeFrom(*source);
  }
}

void AutoScanPb::MergeFrom(const AutoScanPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AutoScanPb)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AutoScanPb::UnsafeMergeFrom(const AutoScanPb& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_seq_type()) {
      set_seq_type(from.seq_type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error_msg()) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (from.has_se()) {
      mutable_se()->::SESeq::MergeFrom(from.se());
    }
    if (from.has_gre()) {
      mutable_gre()->::GRESeq::MergeFrom(from.gre());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AutoScanPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AutoScanPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoScanPb::CopyFrom(const AutoScanPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AutoScanPb)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AutoScanPb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_se()) {
    if (!this->se_->IsInitialized()) return false;
  }
  if (has_gre()) {
    if (!this->gre_->IsInitialized()) return false;
  }
  return true;
}

void AutoScanPb::Swap(AutoScanPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoScanPb::InternalSwap(AutoScanPb* other) {
  std::swap(msg_type_, other->msg_type_);
  std::swap(seq_type_, other->seq_type_);
  std::swap(result_, other->result_);
  error_msg_.Swap(&other->error_msg_);
  std::swap(se_, other->se_);
  std::swap(gre_, other->gre_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoScanPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoScanPb_descriptor_;
  metadata.reflection = AutoScanPb_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoScanPb

// required .MsgType msg_type = 1;
bool AutoScanPb::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoScanPb::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoScanPb::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoScanPb::clear_msg_type() {
  msg_type_ = 1;
  clear_has_msg_type();
}
::MsgType AutoScanPb::msg_type() const {
  // @@protoc_insertion_point(field_get:AutoScanPb.msg_type)
  return static_cast< ::MsgType >(msg_type_);
}
void AutoScanPb::set_msg_type(::MsgType value) {
  assert(::MsgType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:AutoScanPb.msg_type)
}

// optional .SeqType seq_type = 2;
bool AutoScanPb::has_seq_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoScanPb::set_has_seq_type() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoScanPb::clear_has_seq_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoScanPb::clear_seq_type() {
  seq_type_ = 1;
  clear_has_seq_type();
}
::SeqType AutoScanPb::seq_type() const {
  // @@protoc_insertion_point(field_get:AutoScanPb.seq_type)
  return static_cast< ::SeqType >(seq_type_);
}
void AutoScanPb::set_seq_type(::SeqType value) {
  assert(::SeqType_IsValid(value));
  set_has_seq_type();
  seq_type_ = value;
  // @@protoc_insertion_point(field_set:AutoScanPb.seq_type)
}

// optional .ExecResult result = 3;
bool AutoScanPb::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AutoScanPb::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void AutoScanPb::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void AutoScanPb::clear_result() {
  result_ = 1;
  clear_has_result();
}
::ExecResult AutoScanPb::result() const {
  // @@protoc_insertion_point(field_get:AutoScanPb.result)
  return static_cast< ::ExecResult >(result_);
}
void AutoScanPb::set_result(::ExecResult value) {
  assert(::ExecResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AutoScanPb.result)
}

// optional string error_msg = 4;
bool AutoScanPb::has_error_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AutoScanPb::set_has_error_msg() {
  _has_bits_[0] |= 0x00000008u;
}
void AutoScanPb::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
void AutoScanPb::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
const ::std::string& AutoScanPb::error_msg() const {
  // @@protoc_insertion_point(field_get:AutoScanPb.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoScanPb::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AutoScanPb.error_msg)
}
void AutoScanPb::set_error_msg(const char* value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AutoScanPb.error_msg)
}
void AutoScanPb::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AutoScanPb.error_msg)
}
::std::string* AutoScanPb::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:AutoScanPb.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoScanPb::release_error_msg() {
  // @@protoc_insertion_point(field_release:AutoScanPb.error_msg)
  clear_has_error_msg();
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoScanPb::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:AutoScanPb.error_msg)
}

// optional .SESeq se = 5;
bool AutoScanPb::has_se() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AutoScanPb::set_has_se() {
  _has_bits_[0] |= 0x00000010u;
}
void AutoScanPb::clear_has_se() {
  _has_bits_[0] &= ~0x00000010u;
}
void AutoScanPb::clear_se() {
  if (se_ != NULL) se_->::SESeq::Clear();
  clear_has_se();
}
const ::SESeq& AutoScanPb::se() const {
  // @@protoc_insertion_point(field_get:AutoScanPb.se)
  return se_ != NULL ? *se_
                         : *::SESeq::internal_default_instance();
}
::SESeq* AutoScanPb::mutable_se() {
  set_has_se();
  if (se_ == NULL) {
    se_ = new ::SESeq;
  }
  // @@protoc_insertion_point(field_mutable:AutoScanPb.se)
  return se_;
}
::SESeq* AutoScanPb::release_se() {
  // @@protoc_insertion_point(field_release:AutoScanPb.se)
  clear_has_se();
  ::SESeq* temp = se_;
  se_ = NULL;
  return temp;
}
void AutoScanPb::set_allocated_se(::SESeq* se) {
  delete se_;
  se_ = se;
  if (se) {
    set_has_se();
  } else {
    clear_has_se();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoScanPb.se)
}

// optional .GRESeq gre = 6;
bool AutoScanPb::has_gre() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AutoScanPb::set_has_gre() {
  _has_bits_[0] |= 0x00000020u;
}
void AutoScanPb::clear_has_gre() {
  _has_bits_[0] &= ~0x00000020u;
}
void AutoScanPb::clear_gre() {
  if (gre_ != NULL) gre_->::GRESeq::Clear();
  clear_has_gre();
}
const ::GRESeq& AutoScanPb::gre() const {
  // @@protoc_insertion_point(field_get:AutoScanPb.gre)
  return gre_ != NULL ? *gre_
                         : *::GRESeq::internal_default_instance();
}
::GRESeq* AutoScanPb::mutable_gre() {
  set_has_gre();
  if (gre_ == NULL) {
    gre_ = new ::GRESeq;
  }
  // @@protoc_insertion_point(field_mutable:AutoScanPb.gre)
  return gre_;
}
::GRESeq* AutoScanPb::release_gre() {
  // @@protoc_insertion_point(field_release:AutoScanPb.gre)
  clear_has_gre();
  ::GRESeq* temp = gre_;
  gre_ = NULL;
  return temp;
}
void AutoScanPb::set_allocated_gre(::GRESeq* gre) {
  delete gre_;
  gre_ = gre;
  if (gre) {
    set_has_gre();
  } else {
    clear_has_gre();
  }
  // @@protoc_insertion_point(field_set_allocated:AutoScanPb.gre)
}

inline const AutoScanPb* AutoScanPb::internal_default_instance() {
  return &AutoScanPb_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ImgXferPb_ImageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImgXferPb_ImageType_descriptor_;
}
bool ImgXferPb_ImageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImgXferPb_ImageType ImgXferPb::NON_THERM;
const ImgXferPb_ImageType ImgXferPb::THERM;
const ImgXferPb_ImageType ImgXferPb::ImageType_MIN;
const ImgXferPb_ImageType ImgXferPb::ImageType_MAX;
const int ImgXferPb::ImageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgXferPb::kImageTypeFieldNumber;
const int ImgXferPb::kThmXFieldNumber;
const int ImgXferPb::kThmYFieldNumber;
const int ImgXferPb::kThmHeightFieldNumber;
const int ImgXferPb::kThmWidthFieldNumber;
const int ImgXferPb::kThmMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgXferPb::ImgXferPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mrgfus_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImgXferPb)
}

void ImgXferPb::InitAsDefaultInstance() {
}

ImgXferPb::ImgXferPb(const ImgXferPb& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ImgXferPb)
}

void ImgXferPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&thm_x_, 0, reinterpret_cast<char*>(&thm_width_) -
    reinterpret_cast<char*>(&thm_x_) + sizeof(thm_width_));
  image_type_ = 1;
}

ImgXferPb::~ImgXferPb() {
  // @@protoc_insertion_point(destructor:ImgXferPb)
  SharedDtor();
}

void ImgXferPb::SharedDtor() {
}

void ImgXferPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgXferPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImgXferPb_descriptor_;
}

const ImgXferPb& ImgXferPb::default_instance() {
  protobuf_InitDefaults_mrgfus_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImgXferPb> ImgXferPb_default_instance_;

ImgXferPb* ImgXferPb::New(::google::protobuf::Arena* arena) const {
  ImgXferPb* n = new ImgXferPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgXferPb::Clear() {
// @@protoc_insertion_point(message_clear_start:ImgXferPb)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImgXferPb, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImgXferPb*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(thm_x_, thm_width_);
    image_type_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  thm_map_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImgXferPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImgXferPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ImgXferPb.ImageType image_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ImgXferPb_ImageType_IsValid(value)) {
            set_image_type(static_cast< ::ImgXferPb_ImageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_thm_x;
        break;
      }

      // optional uint32 thm_x = 2;
      case 2: {
        if (tag == 16) {
         parse_thm_x:
          set_has_thm_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_thm_y;
        break;
      }

      // optional uint32 thm_y = 3;
      case 3: {
        if (tag == 24) {
         parse_thm_y:
          set_has_thm_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_thm_height;
        break;
      }

      // optional uint32 thm_height = 4;
      case 4: {
        if (tag == 32) {
         parse_thm_height:
          set_has_thm_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_thm_width;
        break;
      }

      // optional uint32 thm_width = 5;
      case 5: {
        if (tag == 40) {
         parse_thm_width:
          set_has_thm_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thm_width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_thm_map;
        break;
      }

      // repeated double thm_map = 6;
      case 6: {
        if (tag == 49) {
         parse_thm_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_thm_map())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_thm_map())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_thm_map;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImgXferPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImgXferPb)
  return false;
#undef DO_
}

void ImgXferPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImgXferPb)
  // required .ImgXferPb.ImageType image_type = 1;
  if (has_image_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->image_type(), output);
  }

  // optional uint32 thm_x = 2;
  if (has_thm_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thm_x(), output);
  }

  // optional uint32 thm_y = 3;
  if (has_thm_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->thm_y(), output);
  }

  // optional uint32 thm_height = 4;
  if (has_thm_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thm_height(), output);
  }

  // optional uint32 thm_width = 5;
  if (has_thm_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->thm_width(), output);
  }

  // repeated double thm_map = 6;
  for (int i = 0; i < this->thm_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->thm_map(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImgXferPb)
}

::google::protobuf::uint8* ImgXferPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImgXferPb)
  // required .ImgXferPb.ImageType image_type = 1;
  if (has_image_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->image_type(), target);
  }

  // optional uint32 thm_x = 2;
  if (has_thm_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thm_x(), target);
  }

  // optional uint32 thm_y = 3;
  if (has_thm_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->thm_y(), target);
  }

  // optional uint32 thm_height = 4;
  if (has_thm_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->thm_height(), target);
  }

  // optional uint32 thm_width = 5;
  if (has_thm_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->thm_width(), target);
  }

  // repeated double thm_map = 6;
  for (int i = 0; i < this->thm_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->thm_map(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImgXferPb)
  return target;
}

size_t ImgXferPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImgXferPb)
  size_t total_size = 0;

  // required .ImgXferPb.ImageType image_type = 1;
  if (has_image_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->image_type());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional uint32 thm_x = 2;
    if (has_thm_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_x());
    }

    // optional uint32 thm_y = 3;
    if (has_thm_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_y());
    }

    // optional uint32 thm_height = 4;
    if (has_thm_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_height());
    }

    // optional uint32 thm_width = 5;
    if (has_thm_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thm_width());
    }

  }
  // repeated double thm_map = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->thm_map_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->thm_map_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgXferPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImgXferPb)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImgXferPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgXferPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImgXferPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImgXferPb)
    UnsafeMergeFrom(*source);
  }
}

void ImgXferPb::MergeFrom(const ImgXferPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImgXferPb)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImgXferPb::UnsafeMergeFrom(const ImgXferPb& from) {
  GOOGLE_DCHECK(&from != this);
  thm_map_.UnsafeMergeFrom(from.thm_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_type()) {
      set_image_type(from.image_type());
    }
    if (from.has_thm_x()) {
      set_thm_x(from.thm_x());
    }
    if (from.has_thm_y()) {
      set_thm_y(from.thm_y());
    }
    if (from.has_thm_height()) {
      set_thm_height(from.thm_height());
    }
    if (from.has_thm_width()) {
      set_thm_width(from.thm_width());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ImgXferPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImgXferPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgXferPb::CopyFrom(const ImgXferPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImgXferPb)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImgXferPb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ImgXferPb::Swap(ImgXferPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgXferPb::InternalSwap(ImgXferPb* other) {
  std::swap(image_type_, other->image_type_);
  std::swap(thm_x_, other->thm_x_);
  std::swap(thm_y_, other->thm_y_);
  std::swap(thm_height_, other->thm_height_);
  std::swap(thm_width_, other->thm_width_);
  thm_map_.UnsafeArenaSwap(&other->thm_map_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgXferPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImgXferPb_descriptor_;
  metadata.reflection = ImgXferPb_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgXferPb

// required .ImgXferPb.ImageType image_type = 1;
bool ImgXferPb::has_image_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImgXferPb::set_has_image_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ImgXferPb::clear_has_image_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImgXferPb::clear_image_type() {
  image_type_ = 1;
  clear_has_image_type();
}
::ImgXferPb_ImageType ImgXferPb::image_type() const {
  // @@protoc_insertion_point(field_get:ImgXferPb.image_type)
  return static_cast< ::ImgXferPb_ImageType >(image_type_);
}
void ImgXferPb::set_image_type(::ImgXferPb_ImageType value) {
  assert(::ImgXferPb_ImageType_IsValid(value));
  set_has_image_type();
  image_type_ = value;
  // @@protoc_insertion_point(field_set:ImgXferPb.image_type)
}

// optional uint32 thm_x = 2;
bool ImgXferPb::has_thm_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImgXferPb::set_has_thm_x() {
  _has_bits_[0] |= 0x00000002u;
}
void ImgXferPb::clear_has_thm_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImgXferPb::clear_thm_x() {
  thm_x_ = 0u;
  clear_has_thm_x();
}
::google::protobuf::uint32 ImgXferPb::thm_x() const {
  // @@protoc_insertion_point(field_get:ImgXferPb.thm_x)
  return thm_x_;
}
void ImgXferPb::set_thm_x(::google::protobuf::uint32 value) {
  set_has_thm_x();
  thm_x_ = value;
  // @@protoc_insertion_point(field_set:ImgXferPb.thm_x)
}

// optional uint32 thm_y = 3;
bool ImgXferPb::has_thm_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImgXferPb::set_has_thm_y() {
  _has_bits_[0] |= 0x00000004u;
}
void ImgXferPb::clear_has_thm_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImgXferPb::clear_thm_y() {
  thm_y_ = 0u;
  clear_has_thm_y();
}
::google::protobuf::uint32 ImgXferPb::thm_y() const {
  // @@protoc_insertion_point(field_get:ImgXferPb.thm_y)
  return thm_y_;
}
void ImgXferPb::set_thm_y(::google::protobuf::uint32 value) {
  set_has_thm_y();
  thm_y_ = value;
  // @@protoc_insertion_point(field_set:ImgXferPb.thm_y)
}

// optional uint32 thm_height = 4;
bool ImgXferPb::has_thm_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImgXferPb::set_has_thm_height() {
  _has_bits_[0] |= 0x00000008u;
}
void ImgXferPb::clear_has_thm_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImgXferPb::clear_thm_height() {
  thm_height_ = 0u;
  clear_has_thm_height();
}
::google::protobuf::uint32 ImgXferPb::thm_height() const {
  // @@protoc_insertion_point(field_get:ImgXferPb.thm_height)
  return thm_height_;
}
void ImgXferPb::set_thm_height(::google::protobuf::uint32 value) {
  set_has_thm_height();
  thm_height_ = value;
  // @@protoc_insertion_point(field_set:ImgXferPb.thm_height)
}

// optional uint32 thm_width = 5;
bool ImgXferPb::has_thm_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImgXferPb::set_has_thm_width() {
  _has_bits_[0] |= 0x00000010u;
}
void ImgXferPb::clear_has_thm_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImgXferPb::clear_thm_width() {
  thm_width_ = 0u;
  clear_has_thm_width();
}
::google::protobuf::uint32 ImgXferPb::thm_width() const {
  // @@protoc_insertion_point(field_get:ImgXferPb.thm_width)
  return thm_width_;
}
void ImgXferPb::set_thm_width(::google::protobuf::uint32 value) {
  set_has_thm_width();
  thm_width_ = value;
  // @@protoc_insertion_point(field_set:ImgXferPb.thm_width)
}

// repeated double thm_map = 6;
int ImgXferPb::thm_map_size() const {
  return thm_map_.size();
}
void ImgXferPb::clear_thm_map() {
  thm_map_.Clear();
}
double ImgXferPb::thm_map(int index) const {
  // @@protoc_insertion_point(field_get:ImgXferPb.thm_map)
  return thm_map_.Get(index);
}
void ImgXferPb::set_thm_map(int index, double value) {
  thm_map_.Set(index, value);
  // @@protoc_insertion_point(field_set:ImgXferPb.thm_map)
}
void ImgXferPb::add_thm_map(double value) {
  thm_map_.Add(value);
  // @@protoc_insertion_point(field_add:ImgXferPb.thm_map)
}
const ::google::protobuf::RepeatedField< double >&
ImgXferPb::thm_map() const {
  // @@protoc_insertion_point(field_list:ImgXferPb.thm_map)
  return thm_map_;
}
::google::protobuf::RepeatedField< double >*
ImgXferPb::mutable_thm_map() {
  // @@protoc_insertion_point(field_mutable_list:ImgXferPb.thm_map)
  return &thm_map_;
}

inline const ImgXferPb* ImgXferPb::internal_default_instance() {
  return &ImgXferPb_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MRgFUSPb_ProtoCateg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MRgFUSPb_ProtoCateg_descriptor_;
}
bool MRgFUSPb_ProtoCateg_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MRgFUSPb_ProtoCateg MRgFUSPb::MR_STATUS_QUERY;
const MRgFUSPb_ProtoCateg MRgFUSPb::MR_STATUS_NOTIFY;
const MRgFUSPb_ProtoCateg MRgFUSPb::MANU_SCAN;
const MRgFUSPb_ProtoCateg MRgFUSPb::AUTO_SCAN;
const MRgFUSPb_ProtoCateg MRgFUSPb::IMG_XFER;
const MRgFUSPb_ProtoCateg MRgFUSPb::ProtoCateg_MIN;
const MRgFUSPb_ProtoCateg MRgFUSPb::ProtoCateg_MAX;
const int MRgFUSPb::ProtoCateg_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MRgFUSPb::kMsgIdFieldNumber;
const int MRgFUSPb::kMsgCategFieldNumber;
const int MRgFUSPb::kMrStatusQueryFieldNumber;
const int MRgFUSPb::kMrStatusNotifyFieldNumber;
const int MRgFUSPb::kManuScanFieldNumber;
const int MRgFUSPb::kAutoScanFieldNumber;
const int MRgFUSPb::kImgXferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MRgFUSPb::MRgFUSPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mrgfus_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MRgFUSPb)
}

void MRgFUSPb::InitAsDefaultInstance() {
  mr_status_query_ = const_cast< ::MRStatusQueryPb*>(
      ::MRStatusQueryPb::internal_default_instance());
  mr_status_notify_ = const_cast< ::MRStatusNotifyPb*>(
      ::MRStatusNotifyPb::internal_default_instance());
  manu_scan_ = const_cast< ::ManuScanPb*>(
      ::ManuScanPb::internal_default_instance());
  auto_scan_ = const_cast< ::AutoScanPb*>(
      ::AutoScanPb::internal_default_instance());
  img_xfer_ = const_cast< ::ImgXferPb*>(
      ::ImgXferPb::internal_default_instance());
}

MRgFUSPb::MRgFUSPb(const MRgFUSPb& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MRgFUSPb)
}

void MRgFUSPb::SharedCtor() {
  _cached_size_ = 0;
  mr_status_query_ = NULL;
  mr_status_notify_ = NULL;
  manu_scan_ = NULL;
  auto_scan_ = NULL;
  img_xfer_ = NULL;
  msg_id_ = 0u;
  msg_categ_ = 1;
}

MRgFUSPb::~MRgFUSPb() {
  // @@protoc_insertion_point(destructor:MRgFUSPb)
  SharedDtor();
}

void MRgFUSPb::SharedDtor() {
  if (this != &MRgFUSPb_default_instance_.get()) {
    delete mr_status_query_;
    delete mr_status_notify_;
    delete manu_scan_;
    delete auto_scan_;
    delete img_xfer_;
  }
}

void MRgFUSPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MRgFUSPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MRgFUSPb_descriptor_;
}

const MRgFUSPb& MRgFUSPb::default_instance() {
  protobuf_InitDefaults_mrgfus_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MRgFUSPb> MRgFUSPb_default_instance_;

MRgFUSPb* MRgFUSPb::New(::google::protobuf::Arena* arena) const {
  MRgFUSPb* n = new MRgFUSPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MRgFUSPb::Clear() {
// @@protoc_insertion_point(message_clear_start:MRgFUSPb)
  if (_has_bits_[0 / 32] & 127u) {
    msg_id_ = 0u;
    msg_categ_ = 1;
    if (has_mr_status_query()) {
      if (mr_status_query_ != NULL) mr_status_query_->::MRStatusQueryPb::Clear();
    }
    if (has_mr_status_notify()) {
      if (mr_status_notify_ != NULL) mr_status_notify_->::MRStatusNotifyPb::Clear();
    }
    if (has_manu_scan()) {
      if (manu_scan_ != NULL) manu_scan_->::ManuScanPb::Clear();
    }
    if (has_auto_scan()) {
      if (auto_scan_ != NULL) auto_scan_->::AutoScanPb::Clear();
    }
    if (has_img_xfer()) {
      if (img_xfer_ != NULL) img_xfer_->::ImgXferPb::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MRgFUSPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MRgFUSPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msg_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_categ;
        break;
      }

      // required .MRgFUSPb.ProtoCateg msg_categ = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_categ:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MRgFUSPb_ProtoCateg_IsValid(value)) {
            set_msg_categ(static_cast< ::MRgFUSPb_ProtoCateg >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mr_status_query;
        break;
      }

      // optional .MRStatusQueryPb mr_status_query = 3;
      case 3: {
        if (tag == 26) {
         parse_mr_status_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mr_status_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mr_status_notify;
        break;
      }

      // optional .MRStatusNotifyPb mr_status_notify = 4;
      case 4: {
        if (tag == 34) {
         parse_mr_status_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mr_status_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_manu_scan;
        break;
      }

      // optional .ManuScanPb manu_scan = 5;
      case 5: {
        if (tag == 42) {
         parse_manu_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manu_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_auto_scan;
        break;
      }

      // optional .AutoScanPb auto_scan = 6;
      case 6: {
        if (tag == 50) {
         parse_auto_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_img_xfer;
        break;
      }

      // optional .ImgXferPb img_xfer = 7;
      case 7: {
        if (tag == 58) {
         parse_img_xfer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img_xfer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MRgFUSPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MRgFUSPb)
  return false;
#undef DO_
}

void MRgFUSPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MRgFUSPb)
  // required uint32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // required .MRgFUSPb.ProtoCateg msg_categ = 2;
  if (has_msg_categ()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_categ(), output);
  }

  // optional .MRStatusQueryPb mr_status_query = 3;
  if (has_mr_status_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mr_status_query_, output);
  }

  // optional .MRStatusNotifyPb mr_status_notify = 4;
  if (has_mr_status_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mr_status_notify_, output);
  }

  // optional .ManuScanPb manu_scan = 5;
  if (has_manu_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->manu_scan_, output);
  }

  // optional .AutoScanPb auto_scan = 6;
  if (has_auto_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->auto_scan_, output);
  }

  // optional .ImgXferPb img_xfer = 7;
  if (has_img_xfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->img_xfer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MRgFUSPb)
}

::google::protobuf::uint8* MRgFUSPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MRgFUSPb)
  // required uint32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  // required .MRgFUSPb.ProtoCateg msg_categ = 2;
  if (has_msg_categ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_categ(), target);
  }

  // optional .MRStatusQueryPb mr_status_query = 3;
  if (has_mr_status_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mr_status_query_, false, target);
  }

  // optional .MRStatusNotifyPb mr_status_notify = 4;
  if (has_mr_status_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->mr_status_notify_, false, target);
  }

  // optional .ManuScanPb manu_scan = 5;
  if (has_manu_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->manu_scan_, false, target);
  }

  // optional .AutoScanPb auto_scan = 6;
  if (has_auto_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->auto_scan_, false, target);
  }

  // optional .ImgXferPb img_xfer = 7;
  if (has_img_xfer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->img_xfer_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MRgFUSPb)
  return target;
}

size_t MRgFUSPb::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MRgFUSPb)
  size_t total_size = 0;

  if (has_msg_id()) {
    // required uint32 msg_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  if (has_msg_categ()) {
    // required .MRgFUSPb.ProtoCateg msg_categ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_categ());
  }

  return total_size;
}
size_t MRgFUSPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MRgFUSPb)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 msg_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());

    // required .MRgFUSPb.ProtoCateg msg_categ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_categ());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 124u) {
    // optional .MRStatusQueryPb mr_status_query = 3;
    if (has_mr_status_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mr_status_query_);
    }

    // optional .MRStatusNotifyPb mr_status_notify = 4;
    if (has_mr_status_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mr_status_notify_);
    }

    // optional .ManuScanPb manu_scan = 5;
    if (has_manu_scan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->manu_scan_);
    }

    // optional .AutoScanPb auto_scan = 6;
    if (has_auto_scan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->auto_scan_);
    }

    // optional .ImgXferPb img_xfer = 7;
    if (has_img_xfer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->img_xfer_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MRgFUSPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MRgFUSPb)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MRgFUSPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MRgFUSPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MRgFUSPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MRgFUSPb)
    UnsafeMergeFrom(*source);
  }
}

void MRgFUSPb::MergeFrom(const MRgFUSPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MRgFUSPb)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MRgFUSPb::UnsafeMergeFrom(const MRgFUSPb& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_categ()) {
      set_msg_categ(from.msg_categ());
    }
    if (from.has_mr_status_query()) {
      mutable_mr_status_query()->::MRStatusQueryPb::MergeFrom(from.mr_status_query());
    }
    if (from.has_mr_status_notify()) {
      mutable_mr_status_notify()->::MRStatusNotifyPb::MergeFrom(from.mr_status_notify());
    }
    if (from.has_manu_scan()) {
      mutable_manu_scan()->::ManuScanPb::MergeFrom(from.manu_scan());
    }
    if (from.has_auto_scan()) {
      mutable_auto_scan()->::AutoScanPb::MergeFrom(from.auto_scan());
    }
    if (from.has_img_xfer()) {
      mutable_img_xfer()->::ImgXferPb::MergeFrom(from.img_xfer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MRgFUSPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MRgFUSPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MRgFUSPb::CopyFrom(const MRgFUSPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MRgFUSPb)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MRgFUSPb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mr_status_query()) {
    if (!this->mr_status_query_->IsInitialized()) return false;
  }
  if (has_mr_status_notify()) {
    if (!this->mr_status_notify_->IsInitialized()) return false;
  }
  if (has_manu_scan()) {
    if (!this->manu_scan_->IsInitialized()) return false;
  }
  if (has_auto_scan()) {
    if (!this->auto_scan_->IsInitialized()) return false;
  }
  if (has_img_xfer()) {
    if (!this->img_xfer_->IsInitialized()) return false;
  }
  return true;
}

void MRgFUSPb::Swap(MRgFUSPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MRgFUSPb::InternalSwap(MRgFUSPb* other) {
  std::swap(msg_id_, other->msg_id_);
  std::swap(msg_categ_, other->msg_categ_);
  std::swap(mr_status_query_, other->mr_status_query_);
  std::swap(mr_status_notify_, other->mr_status_notify_);
  std::swap(manu_scan_, other->manu_scan_);
  std::swap(auto_scan_, other->auto_scan_);
  std::swap(img_xfer_, other->img_xfer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MRgFUSPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MRgFUSPb_descriptor_;
  metadata.reflection = MRgFUSPb_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MRgFUSPb

// required uint32 msg_id = 1;
bool MRgFUSPb::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MRgFUSPb::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MRgFUSPb::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MRgFUSPb::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
::google::protobuf::uint32 MRgFUSPb::msg_id() const {
  // @@protoc_insertion_point(field_get:MRgFUSPb.msg_id)
  return msg_id_;
}
void MRgFUSPb::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:MRgFUSPb.msg_id)
}

// required .MRgFUSPb.ProtoCateg msg_categ = 2;
bool MRgFUSPb::has_msg_categ() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MRgFUSPb::set_has_msg_categ() {
  _has_bits_[0] |= 0x00000002u;
}
void MRgFUSPb::clear_has_msg_categ() {
  _has_bits_[0] &= ~0x00000002u;
}
void MRgFUSPb::clear_msg_categ() {
  msg_categ_ = 1;
  clear_has_msg_categ();
}
::MRgFUSPb_ProtoCateg MRgFUSPb::msg_categ() const {
  // @@protoc_insertion_point(field_get:MRgFUSPb.msg_categ)
  return static_cast< ::MRgFUSPb_ProtoCateg >(msg_categ_);
}
void MRgFUSPb::set_msg_categ(::MRgFUSPb_ProtoCateg value) {
  assert(::MRgFUSPb_ProtoCateg_IsValid(value));
  set_has_msg_categ();
  msg_categ_ = value;
  // @@protoc_insertion_point(field_set:MRgFUSPb.msg_categ)
}

// optional .MRStatusQueryPb mr_status_query = 3;
bool MRgFUSPb::has_mr_status_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MRgFUSPb::set_has_mr_status_query() {
  _has_bits_[0] |= 0x00000004u;
}
void MRgFUSPb::clear_has_mr_status_query() {
  _has_bits_[0] &= ~0x00000004u;
}
void MRgFUSPb::clear_mr_status_query() {
  if (mr_status_query_ != NULL) mr_status_query_->::MRStatusQueryPb::Clear();
  clear_has_mr_status_query();
}
const ::MRStatusQueryPb& MRgFUSPb::mr_status_query() const {
  // @@protoc_insertion_point(field_get:MRgFUSPb.mr_status_query)
  return mr_status_query_ != NULL ? *mr_status_query_
                         : *::MRStatusQueryPb::internal_default_instance();
}
::MRStatusQueryPb* MRgFUSPb::mutable_mr_status_query() {
  set_has_mr_status_query();
  if (mr_status_query_ == NULL) {
    mr_status_query_ = new ::MRStatusQueryPb;
  }
  // @@protoc_insertion_point(field_mutable:MRgFUSPb.mr_status_query)
  return mr_status_query_;
}
::MRStatusQueryPb* MRgFUSPb::release_mr_status_query() {
  // @@protoc_insertion_point(field_release:MRgFUSPb.mr_status_query)
  clear_has_mr_status_query();
  ::MRStatusQueryPb* temp = mr_status_query_;
  mr_status_query_ = NULL;
  return temp;
}
void MRgFUSPb::set_allocated_mr_status_query(::MRStatusQueryPb* mr_status_query) {
  delete mr_status_query_;
  mr_status_query_ = mr_status_query;
  if (mr_status_query) {
    set_has_mr_status_query();
  } else {
    clear_has_mr_status_query();
  }
  // @@protoc_insertion_point(field_set_allocated:MRgFUSPb.mr_status_query)
}

// optional .MRStatusNotifyPb mr_status_notify = 4;
bool MRgFUSPb::has_mr_status_notify() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MRgFUSPb::set_has_mr_status_notify() {
  _has_bits_[0] |= 0x00000008u;
}
void MRgFUSPb::clear_has_mr_status_notify() {
  _has_bits_[0] &= ~0x00000008u;
}
void MRgFUSPb::clear_mr_status_notify() {
  if (mr_status_notify_ != NULL) mr_status_notify_->::MRStatusNotifyPb::Clear();
  clear_has_mr_status_notify();
}
const ::MRStatusNotifyPb& MRgFUSPb::mr_status_notify() const {
  // @@protoc_insertion_point(field_get:MRgFUSPb.mr_status_notify)
  return mr_status_notify_ != NULL ? *mr_status_notify_
                         : *::MRStatusNotifyPb::internal_default_instance();
}
::MRStatusNotifyPb* MRgFUSPb::mutable_mr_status_notify() {
  set_has_mr_status_notify();
  if (mr_status_notify_ == NULL) {
    mr_status_notify_ = new ::MRStatusNotifyPb;
  }
  // @@protoc_insertion_point(field_mutable:MRgFUSPb.mr_status_notify)
  return mr_status_notify_;
}
::MRStatusNotifyPb* MRgFUSPb::release_mr_status_notify() {
  // @@protoc_insertion_point(field_release:MRgFUSPb.mr_status_notify)
  clear_has_mr_status_notify();
  ::MRStatusNotifyPb* temp = mr_status_notify_;
  mr_status_notify_ = NULL;
  return temp;
}
void MRgFUSPb::set_allocated_mr_status_notify(::MRStatusNotifyPb* mr_status_notify) {
  delete mr_status_notify_;
  mr_status_notify_ = mr_status_notify;
  if (mr_status_notify) {
    set_has_mr_status_notify();
  } else {
    clear_has_mr_status_notify();
  }
  // @@protoc_insertion_point(field_set_allocated:MRgFUSPb.mr_status_notify)
}

// optional .ManuScanPb manu_scan = 5;
bool MRgFUSPb::has_manu_scan() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MRgFUSPb::set_has_manu_scan() {
  _has_bits_[0] |= 0x00000010u;
}
void MRgFUSPb::clear_has_manu_scan() {
  _has_bits_[0] &= ~0x00000010u;
}
void MRgFUSPb::clear_manu_scan() {
  if (manu_scan_ != NULL) manu_scan_->::ManuScanPb::Clear();
  clear_has_manu_scan();
}
const ::ManuScanPb& MRgFUSPb::manu_scan() const {
  // @@protoc_insertion_point(field_get:MRgFUSPb.manu_scan)
  return manu_scan_ != NULL ? *manu_scan_
                         : *::ManuScanPb::internal_default_instance();
}
::ManuScanPb* MRgFUSPb::mutable_manu_scan() {
  set_has_manu_scan();
  if (manu_scan_ == NULL) {
    manu_scan_ = new ::ManuScanPb;
  }
  // @@protoc_insertion_point(field_mutable:MRgFUSPb.manu_scan)
  return manu_scan_;
}
::ManuScanPb* MRgFUSPb::release_manu_scan() {
  // @@protoc_insertion_point(field_release:MRgFUSPb.manu_scan)
  clear_has_manu_scan();
  ::ManuScanPb* temp = manu_scan_;
  manu_scan_ = NULL;
  return temp;
}
void MRgFUSPb::set_allocated_manu_scan(::ManuScanPb* manu_scan) {
  delete manu_scan_;
  manu_scan_ = manu_scan;
  if (manu_scan) {
    set_has_manu_scan();
  } else {
    clear_has_manu_scan();
  }
  // @@protoc_insertion_point(field_set_allocated:MRgFUSPb.manu_scan)
}

// optional .AutoScanPb auto_scan = 6;
bool MRgFUSPb::has_auto_scan() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MRgFUSPb::set_has_auto_scan() {
  _has_bits_[0] |= 0x00000020u;
}
void MRgFUSPb::clear_has_auto_scan() {
  _has_bits_[0] &= ~0x00000020u;
}
void MRgFUSPb::clear_auto_scan() {
  if (auto_scan_ != NULL) auto_scan_->::AutoScanPb::Clear();
  clear_has_auto_scan();
}
const ::AutoScanPb& MRgFUSPb::auto_scan() const {
  // @@protoc_insertion_point(field_get:MRgFUSPb.auto_scan)
  return auto_scan_ != NULL ? *auto_scan_
                         : *::AutoScanPb::internal_default_instance();
}
::AutoScanPb* MRgFUSPb::mutable_auto_scan() {
  set_has_auto_scan();
  if (auto_scan_ == NULL) {
    auto_scan_ = new ::AutoScanPb;
  }
  // @@protoc_insertion_point(field_mutable:MRgFUSPb.auto_scan)
  return auto_scan_;
}
::AutoScanPb* MRgFUSPb::release_auto_scan() {
  // @@protoc_insertion_point(field_release:MRgFUSPb.auto_scan)
  clear_has_auto_scan();
  ::AutoScanPb* temp = auto_scan_;
  auto_scan_ = NULL;
  return temp;
}
void MRgFUSPb::set_allocated_auto_scan(::AutoScanPb* auto_scan) {
  delete auto_scan_;
  auto_scan_ = auto_scan;
  if (auto_scan) {
    set_has_auto_scan();
  } else {
    clear_has_auto_scan();
  }
  // @@protoc_insertion_point(field_set_allocated:MRgFUSPb.auto_scan)
}

// optional .ImgXferPb img_xfer = 7;
bool MRgFUSPb::has_img_xfer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MRgFUSPb::set_has_img_xfer() {
  _has_bits_[0] |= 0x00000040u;
}
void MRgFUSPb::clear_has_img_xfer() {
  _has_bits_[0] &= ~0x00000040u;
}
void MRgFUSPb::clear_img_xfer() {
  if (img_xfer_ != NULL) img_xfer_->::ImgXferPb::Clear();
  clear_has_img_xfer();
}
const ::ImgXferPb& MRgFUSPb::img_xfer() const {
  // @@protoc_insertion_point(field_get:MRgFUSPb.img_xfer)
  return img_xfer_ != NULL ? *img_xfer_
                         : *::ImgXferPb::internal_default_instance();
}
::ImgXferPb* MRgFUSPb::mutable_img_xfer() {
  set_has_img_xfer();
  if (img_xfer_ == NULL) {
    img_xfer_ = new ::ImgXferPb;
  }
  // @@protoc_insertion_point(field_mutable:MRgFUSPb.img_xfer)
  return img_xfer_;
}
::ImgXferPb* MRgFUSPb::release_img_xfer() {
  // @@protoc_insertion_point(field_release:MRgFUSPb.img_xfer)
  clear_has_img_xfer();
  ::ImgXferPb* temp = img_xfer_;
  img_xfer_ = NULL;
  return temp;
}
void MRgFUSPb::set_allocated_img_xfer(::ImgXferPb* img_xfer) {
  delete img_xfer_;
  img_xfer_ = img_xfer;
  if (img_xfer) {
    set_has_img_xfer();
  } else {
    clear_has_img_xfer();
  }
  // @@protoc_insertion_point(field_set_allocated:MRgFUSPb.img_xfer)
}

inline const MRgFUSPb* MRgFUSPb::internal_default_instance() {
  return &MRgFUSPb_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
