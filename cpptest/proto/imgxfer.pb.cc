// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imgxfer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "imgxfer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace imgxfer {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImgXferMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImgXferMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UiOption_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_imgxfer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_imgxfer_2eproto() {
  protobuf_AddDesc_imgxfer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "imgxfer.proto");
  GOOGLE_CHECK(file != NULL);
  Position_descriptor_ = file->message_type(0);
  static const int Position_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::internal_default_instance(),
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_),
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_));
  UiControl_descriptor_ = file->message_type(1);
  static const int UiControl_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiControl, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiControl, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiControl, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiControl, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiControl, sleep_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiControl, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiControl, ignored_),
  };
  UiControl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UiControl_descriptor_,
      UiControl::internal_default_instance(),
      UiControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiControl, _has_bits_),
      -1,
      -1,
      sizeof(UiControl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiControl, _internal_metadata_));
  ImgXferMsg_descriptor_ = file->message_type(2);
  static const int ImgXferMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferMsg, ack_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferMsg, ui_),
  };
  ImgXferMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImgXferMsg_descriptor_,
      ImgXferMsg::internal_default_instance(),
      ImgXferMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferMsg, _has_bits_),
      -1,
      -1,
      sizeof(ImgXferMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgXferMsg, _internal_metadata_));
  MsgType_descriptor_ = file->enum_type(0);
  UiOption_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_imgxfer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, Position::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UiControl_descriptor_, UiControl::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImgXferMsg_descriptor_, ImgXferMsg::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_imgxfer_2eproto() {
  Position_default_instance_.Shutdown();
  delete Position_reflection_;
  UiControl_default_instance_.Shutdown();
  delete UiControl_reflection_;
  ImgXferMsg_default_instance_.Shutdown();
  delete ImgXferMsg_reflection_;
}

void protobuf_InitDefaults_imgxfer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Position_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UiControl_default_instance_.DefaultConstruct();
  ImgXferMsg_default_instance_.DefaultConstruct();
  Position_default_instance_.get_mutable()->InitAsDefaultInstance();
  UiControl_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImgXferMsg_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_imgxfer_2eproto_once_);
void protobuf_InitDefaults_imgxfer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_imgxfer_2eproto_once_,
                 &protobuf_InitDefaults_imgxfer_2eproto_impl);
}
void protobuf_AddDesc_imgxfer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_imgxfer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rimgxfer.proto\022\rimgxfer.proto\" \n\010Positi"
    "on\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"\267\001\n\tUiControl\022\'"
    "\n\006option\030\001 \002(\0162\027.imgxfer.proto.UiOption\022"
    "\020\n\010sequence\030\002 \002(\r\022)\n\010position\030\003 \001(\0132\027.im"
    "gxfer.proto.Position\022\r\n\005input\030\004 \001(\t\022\022\n\ns"
    "leep_time\030\005 \001(\r\022\020\n\010resource\030\006 \001(\t\022\017\n\007ign"
    "ored\030\007 \001(\010\"w\n\nImgXferMsg\022$\n\004type\030\001 \002(\0162\026"
    ".imgxfer.proto.MsgType\022\n\n\002id\030\002 \002(\r\022\021\n\tac"
    "k_value\030\003 \001(\r\022$\n\002ui\030\004 \001(\0132\030.imgxfer.prot"
    "o.UiControl*f\n\007MsgType\022\022\n\016IMG_XFER_START"
    "\020\001\022\021\n\rIMG_XFER_STOP\020\002\022\017\n\013IMG_XFER_UI\020\003\022\020"
    "\n\014IMG_XFER_ACK\020\004\022\021\n\rIMG_XFER_QUIT\020\005*I\n\010U"
    "iOption\022\017\n\013MOUSE_CLICK\020\001\022\017\n\013RIGHT_CLICK\020"
    "\002\022\020\n\014DOUBLE_CLICK\020\003\022\t\n\005INPUT\020\004", 550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "imgxfer.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_imgxfer_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_imgxfer_2eproto_once_);
void protobuf_AddDesc_imgxfer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_imgxfer_2eproto_once_,
                 &protobuf_AddDesc_imgxfer_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_imgxfer_2eproto {
  StaticDescriptorInitializer_imgxfer_2eproto() {
    protobuf_AddDesc_imgxfer_2eproto();
  }
} static_descriptor_initializer_imgxfer_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UiOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiOption_descriptor_;
}
bool UiOption_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_imgxfer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:imgxfer.proto.Position)
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:imgxfer.proto.Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:imgxfer.proto.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  protobuf_InitDefaults_imgxfer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Position> Position_default_instance_;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:imgxfer.proto.Position)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Position, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:imgxfer.proto.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:imgxfer.proto.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:imgxfer.proto.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:imgxfer.proto.Position)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:imgxfer.proto.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:imgxfer.proto.Position)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:imgxfer.proto.Position)
  return target;
}

size_t Position::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:imgxfer.proto.Position)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:imgxfer.proto.Position)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:imgxfer.proto.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:imgxfer.proto.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:imgxfer.proto.Position)
    UnsafeMergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:imgxfer.proto.Position)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Position::UnsafeMergeFrom(const Position& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:imgxfer.proto.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:imgxfer.proto.Position)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// required int32 x = 1;
bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Position::x() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.Position.x)
  return x_;
}
void Position::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:imgxfer.proto.Position.x)
}

// required int32 y = 2;
bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Position::y() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.Position.y)
  return y_;
}
void Position::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:imgxfer.proto.Position.y)
}

inline const Position* Position::internal_default_instance() {
  return &Position_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UiControl::kOptionFieldNumber;
const int UiControl::kSequenceFieldNumber;
const int UiControl::kPositionFieldNumber;
const int UiControl::kInputFieldNumber;
const int UiControl::kSleepTimeFieldNumber;
const int UiControl::kResourceFieldNumber;
const int UiControl::kIgnoredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UiControl::UiControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_imgxfer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:imgxfer.proto.UiControl)
}

void UiControl::InitAsDefaultInstance() {
  position_ = const_cast< ::imgxfer::proto::Position*>(
      ::imgxfer::proto::Position::internal_default_instance());
}

UiControl::UiControl(const UiControl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:imgxfer.proto.UiControl)
}

void UiControl::SharedCtor() {
  _cached_size_ = 0;
  input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  ::memset(&sequence_, 0, reinterpret_cast<char*>(&ignored_) -
    reinterpret_cast<char*>(&sequence_) + sizeof(ignored_));
  option_ = 1;
}

UiControl::~UiControl() {
  // @@protoc_insertion_point(destructor:imgxfer.proto.UiControl)
  SharedDtor();
}

void UiControl::SharedDtor() {
  input_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &UiControl_default_instance_.get()) {
    delete position_;
  }
}

void UiControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiControl_descriptor_;
}

const UiControl& UiControl::default_instance() {
  protobuf_InitDefaults_imgxfer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UiControl> UiControl_default_instance_;

UiControl* UiControl::New(::google::protobuf::Arena* arena) const {
  UiControl* n = new UiControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UiControl::Clear() {
// @@protoc_insertion_point(message_clear_start:imgxfer.proto.UiControl)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UiControl, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UiControl*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(sequence_, ignored_);
    option_ = 1;
    if (has_position()) {
      if (position_ != NULL) position_->::imgxfer::proto::Position::Clear();
    }
    if (has_input()) {
      input_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_resource()) {
      resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UiControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:imgxfer.proto.UiControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .imgxfer.proto.UiOption option = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::imgxfer::proto::UiOption_IsValid(value)) {
            set_option(static_cast< ::imgxfer::proto::UiOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // required uint32 sequence = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence:
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .imgxfer.proto.Position position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_input;
        break;
      }

      // optional string input = 4;
      case 4: {
        if (tag == 34) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input().data(), this->input().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imgxfer.proto.UiControl.input");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sleep_time;
        break;
      }

      // optional uint32 sleep_time = 5;
      case 5: {
        if (tag == 40) {
         parse_sleep_time:
          set_has_sleep_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sleep_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_resource;
        break;
      }

      // optional string resource = 6;
      case 6: {
        if (tag == 50) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imgxfer.proto.UiControl.resource");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ignored;
        break;
      }

      // optional bool ignored = 7;
      case 7: {
        if (tag == 56) {
         parse_ignored:
          set_has_ignored();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignored_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:imgxfer.proto.UiControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:imgxfer.proto.UiControl)
  return false;
#undef DO_
}

void UiControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:imgxfer.proto.UiControl)
  // required .imgxfer.proto.UiOption option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->option(), output);
  }

  // required uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional .imgxfer.proto.Position position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // optional string input = 4;
  if (has_input()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input().data(), this->input().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imgxfer.proto.UiControl.input");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->input(), output);
  }

  // optional uint32 sleep_time = 5;
  if (has_sleep_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sleep_time(), output);
  }

  // optional string resource = 6;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imgxfer.proto.UiControl.resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->resource(), output);
  }

  // optional bool ignored = 7;
  if (has_ignored()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ignored(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:imgxfer.proto.UiControl)
}

::google::protobuf::uint8* UiControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:imgxfer.proto.UiControl)
  // required .imgxfer.proto.UiOption option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->option(), target);
  }

  // required uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional .imgxfer.proto.Position position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->position_, false, target);
  }

  // optional string input = 4;
  if (has_input()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input().data(), this->input().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imgxfer.proto.UiControl.input");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->input(), target);
  }

  // optional uint32 sleep_time = 5;
  if (has_sleep_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sleep_time(), target);
  }

  // optional string resource = 6;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imgxfer.proto.UiControl.resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->resource(), target);
  }

  // optional bool ignored = 7;
  if (has_ignored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ignored(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:imgxfer.proto.UiControl)
  return target;
}

size_t UiControl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:imgxfer.proto.UiControl)
  size_t total_size = 0;

  if (has_option()) {
    // required .imgxfer.proto.UiOption option = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
  }

  if (has_sequence()) {
    // required uint32 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence());
  }

  return total_size;
}
size_t UiControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:imgxfer.proto.UiControl)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .imgxfer.proto.UiOption option = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());

    // required uint32 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 124u) {
    // optional .imgxfer.proto.Position position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional string input = 4;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input());
    }

    // optional uint32 sleep_time = 5;
    if (has_sleep_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sleep_time());
    }

    // optional string resource = 6;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional bool ignored = 7;
    if (has_ignored()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:imgxfer.proto.UiControl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UiControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UiControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:imgxfer.proto.UiControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:imgxfer.proto.UiControl)
    UnsafeMergeFrom(*source);
  }
}

void UiControl::MergeFrom(const UiControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:imgxfer.proto.UiControl)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UiControl::UnsafeMergeFrom(const UiControl& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_position()) {
      mutable_position()->::imgxfer::proto::Position::MergeFrom(from.position());
    }
    if (from.has_input()) {
      set_has_input();
      input_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_);
    }
    if (from.has_sleep_time()) {
      set_sleep_time(from.sleep_time());
    }
    if (from.has_resource()) {
      set_has_resource();
      resource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_);
    }
    if (from.has_ignored()) {
      set_ignored(from.ignored());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void UiControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:imgxfer.proto.UiControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiControl::CopyFrom(const UiControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:imgxfer.proto.UiControl)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UiControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  return true;
}

void UiControl::Swap(UiControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UiControl::InternalSwap(UiControl* other) {
  std::swap(option_, other->option_);
  std::swap(sequence_, other->sequence_);
  std::swap(position_, other->position_);
  input_.Swap(&other->input_);
  std::swap(sleep_time_, other->sleep_time_);
  resource_.Swap(&other->resource_);
  std::swap(ignored_, other->ignored_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UiControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiControl_descriptor_;
  metadata.reflection = UiControl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UiControl

// required .imgxfer.proto.UiOption option = 1;
bool UiControl::has_option() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UiControl::set_has_option() {
  _has_bits_[0] |= 0x00000001u;
}
void UiControl::clear_has_option() {
  _has_bits_[0] &= ~0x00000001u;
}
void UiControl::clear_option() {
  option_ = 1;
  clear_has_option();
}
::imgxfer::proto::UiOption UiControl::option() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.UiControl.option)
  return static_cast< ::imgxfer::proto::UiOption >(option_);
}
void UiControl::set_option(::imgxfer::proto::UiOption value) {
  assert(::imgxfer::proto::UiOption_IsValid(value));
  set_has_option();
  option_ = value;
  // @@protoc_insertion_point(field_set:imgxfer.proto.UiControl.option)
}

// required uint32 sequence = 2;
bool UiControl::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UiControl::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
void UiControl::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
void UiControl::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
::google::protobuf::uint32 UiControl::sequence() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.UiControl.sequence)
  return sequence_;
}
void UiControl::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:imgxfer.proto.UiControl.sequence)
}

// optional .imgxfer.proto.Position position = 3;
bool UiControl::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UiControl::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void UiControl::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void UiControl::clear_position() {
  if (position_ != NULL) position_->::imgxfer::proto::Position::Clear();
  clear_has_position();
}
const ::imgxfer::proto::Position& UiControl::position() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.UiControl.position)
  return position_ != NULL ? *position_
                         : *::imgxfer::proto::Position::internal_default_instance();
}
::imgxfer::proto::Position* UiControl::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::imgxfer::proto::Position;
  }
  // @@protoc_insertion_point(field_mutable:imgxfer.proto.UiControl.position)
  return position_;
}
::imgxfer::proto::Position* UiControl::release_position() {
  // @@protoc_insertion_point(field_release:imgxfer.proto.UiControl.position)
  clear_has_position();
  ::imgxfer::proto::Position* temp = position_;
  position_ = NULL;
  return temp;
}
void UiControl::set_allocated_position(::imgxfer::proto::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:imgxfer.proto.UiControl.position)
}

// optional string input = 4;
bool UiControl::has_input() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UiControl::set_has_input() {
  _has_bits_[0] |= 0x00000008u;
}
void UiControl::clear_has_input() {
  _has_bits_[0] &= ~0x00000008u;
}
void UiControl::clear_input() {
  input_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input();
}
const ::std::string& UiControl::input() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.UiControl.input)
  return input_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UiControl::set_input(const ::std::string& value) {
  set_has_input();
  input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imgxfer.proto.UiControl.input)
}
void UiControl::set_input(const char* value) {
  set_has_input();
  input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imgxfer.proto.UiControl.input)
}
void UiControl::set_input(const char* value, size_t size) {
  set_has_input();
  input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imgxfer.proto.UiControl.input)
}
::std::string* UiControl::mutable_input() {
  set_has_input();
  // @@protoc_insertion_point(field_mutable:imgxfer.proto.UiControl.input)
  return input_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UiControl::release_input() {
  // @@protoc_insertion_point(field_release:imgxfer.proto.UiControl.input)
  clear_has_input();
  return input_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UiControl::set_allocated_input(::std::string* input) {
  if (input != NULL) {
    set_has_input();
  } else {
    clear_has_input();
  }
  input_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input);
  // @@protoc_insertion_point(field_set_allocated:imgxfer.proto.UiControl.input)
}

// optional uint32 sleep_time = 5;
bool UiControl::has_sleep_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UiControl::set_has_sleep_time() {
  _has_bits_[0] |= 0x00000010u;
}
void UiControl::clear_has_sleep_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void UiControl::clear_sleep_time() {
  sleep_time_ = 0u;
  clear_has_sleep_time();
}
::google::protobuf::uint32 UiControl::sleep_time() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.UiControl.sleep_time)
  return sleep_time_;
}
void UiControl::set_sleep_time(::google::protobuf::uint32 value) {
  set_has_sleep_time();
  sleep_time_ = value;
  // @@protoc_insertion_point(field_set:imgxfer.proto.UiControl.sleep_time)
}

// optional string resource = 6;
bool UiControl::has_resource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UiControl::set_has_resource() {
  _has_bits_[0] |= 0x00000020u;
}
void UiControl::clear_has_resource() {
  _has_bits_[0] &= ~0x00000020u;
}
void UiControl::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource();
}
const ::std::string& UiControl::resource() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.UiControl.resource)
  return resource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UiControl::set_resource(const ::std::string& value) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imgxfer.proto.UiControl.resource)
}
void UiControl::set_resource(const char* value) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imgxfer.proto.UiControl.resource)
}
void UiControl::set_resource(const char* value, size_t size) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imgxfer.proto.UiControl.resource)
}
::std::string* UiControl::mutable_resource() {
  set_has_resource();
  // @@protoc_insertion_point(field_mutable:imgxfer.proto.UiControl.resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UiControl::release_resource() {
  // @@protoc_insertion_point(field_release:imgxfer.proto.UiControl.resource)
  clear_has_resource();
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UiControl::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    set_has_resource();
  } else {
    clear_has_resource();
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:imgxfer.proto.UiControl.resource)
}

// optional bool ignored = 7;
bool UiControl::has_ignored() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UiControl::set_has_ignored() {
  _has_bits_[0] |= 0x00000040u;
}
void UiControl::clear_has_ignored() {
  _has_bits_[0] &= ~0x00000040u;
}
void UiControl::clear_ignored() {
  ignored_ = false;
  clear_has_ignored();
}
bool UiControl::ignored() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.UiControl.ignored)
  return ignored_;
}
void UiControl::set_ignored(bool value) {
  set_has_ignored();
  ignored_ = value;
  // @@protoc_insertion_point(field_set:imgxfer.proto.UiControl.ignored)
}

inline const UiControl* UiControl::internal_default_instance() {
  return &UiControl_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgXferMsg::kTypeFieldNumber;
const int ImgXferMsg::kIdFieldNumber;
const int ImgXferMsg::kAckValueFieldNumber;
const int ImgXferMsg::kUiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgXferMsg::ImgXferMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_imgxfer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:imgxfer.proto.ImgXferMsg)
}

void ImgXferMsg::InitAsDefaultInstance() {
  ui_ = const_cast< ::imgxfer::proto::UiControl*>(
      ::imgxfer::proto::UiControl::internal_default_instance());
}

ImgXferMsg::ImgXferMsg(const ImgXferMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:imgxfer.proto.ImgXferMsg)
}

void ImgXferMsg::SharedCtor() {
  _cached_size_ = 0;
  ui_ = NULL;
  ::memset(&id_, 0, reinterpret_cast<char*>(&ack_value_) -
    reinterpret_cast<char*>(&id_) + sizeof(ack_value_));
  type_ = 1;
}

ImgXferMsg::~ImgXferMsg() {
  // @@protoc_insertion_point(destructor:imgxfer.proto.ImgXferMsg)
  SharedDtor();
}

void ImgXferMsg::SharedDtor() {
  if (this != &ImgXferMsg_default_instance_.get()) {
    delete ui_;
  }
}

void ImgXferMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgXferMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImgXferMsg_descriptor_;
}

const ImgXferMsg& ImgXferMsg::default_instance() {
  protobuf_InitDefaults_imgxfer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImgXferMsg> ImgXferMsg_default_instance_;

ImgXferMsg* ImgXferMsg::New(::google::protobuf::Arena* arena) const {
  ImgXferMsg* n = new ImgXferMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgXferMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:imgxfer.proto.ImgXferMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImgXferMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImgXferMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(id_, ack_value_);
    type_ = 1;
    if (has_ui()) {
      if (ui_ != NULL) ui_->::imgxfer::proto::UiControl::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImgXferMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:imgxfer.proto.ImgXferMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .imgxfer.proto.MsgType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::imgxfer::proto::MsgType_IsValid(value)) {
            set_type(static_cast< ::imgxfer::proto::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ack_value;
        break;
      }

      // optional uint32 ack_value = 3;
      case 3: {
        if (tag == 24) {
         parse_ack_value:
          set_has_ack_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ui;
        break;
      }

      // optional .imgxfer.proto.UiControl ui = 4;
      case 4: {
        if (tag == 34) {
         parse_ui:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ui()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:imgxfer.proto.ImgXferMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:imgxfer.proto.ImgXferMsg)
  return false;
#undef DO_
}

void ImgXferMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:imgxfer.proto.ImgXferMsg)
  // required .imgxfer.proto.MsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 ack_value = 3;
  if (has_ack_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ack_value(), output);
  }

  // optional .imgxfer.proto.UiControl ui = 4;
  if (has_ui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ui_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:imgxfer.proto.ImgXferMsg)
}

::google::protobuf::uint8* ImgXferMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:imgxfer.proto.ImgXferMsg)
  // required .imgxfer.proto.MsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 ack_value = 3;
  if (has_ack_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ack_value(), target);
  }

  // optional .imgxfer.proto.UiControl ui = 4;
  if (has_ui()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ui_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:imgxfer.proto.ImgXferMsg)
  return target;
}

size_t ImgXferMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:imgxfer.proto.ImgXferMsg)
  size_t total_size = 0;

  if (has_type()) {
    // required .imgxfer.proto.MsgType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_id()) {
    // required uint32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t ImgXferMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:imgxfer.proto.ImgXferMsg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .imgxfer.proto.MsgType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional uint32 ack_value = 3;
    if (has_ack_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_value());
    }

    // optional .imgxfer.proto.UiControl ui = 4;
    if (has_ui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ui_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgXferMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:imgxfer.proto.ImgXferMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImgXferMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgXferMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:imgxfer.proto.ImgXferMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:imgxfer.proto.ImgXferMsg)
    UnsafeMergeFrom(*source);
  }
}

void ImgXferMsg::MergeFrom(const ImgXferMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:imgxfer.proto.ImgXferMsg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImgXferMsg::UnsafeMergeFrom(const ImgXferMsg& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ack_value()) {
      set_ack_value(from.ack_value());
    }
    if (from.has_ui()) {
      mutable_ui()->::imgxfer::proto::UiControl::MergeFrom(from.ui());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ImgXferMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:imgxfer.proto.ImgXferMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgXferMsg::CopyFrom(const ImgXferMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:imgxfer.proto.ImgXferMsg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImgXferMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ui()) {
    if (!this->ui_->IsInitialized()) return false;
  }
  return true;
}

void ImgXferMsg::Swap(ImgXferMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgXferMsg::InternalSwap(ImgXferMsg* other) {
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  std::swap(ack_value_, other->ack_value_);
  std::swap(ui_, other->ui_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgXferMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImgXferMsg_descriptor_;
  metadata.reflection = ImgXferMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgXferMsg

// required .imgxfer.proto.MsgType type = 1;
bool ImgXferMsg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImgXferMsg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ImgXferMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImgXferMsg::clear_type() {
  type_ = 1;
  clear_has_type();
}
::imgxfer::proto::MsgType ImgXferMsg::type() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.ImgXferMsg.type)
  return static_cast< ::imgxfer::proto::MsgType >(type_);
}
void ImgXferMsg::set_type(::imgxfer::proto::MsgType value) {
  assert(::imgxfer::proto::MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:imgxfer.proto.ImgXferMsg.type)
}

// required uint32 id = 2;
bool ImgXferMsg::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImgXferMsg::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ImgXferMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImgXferMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 ImgXferMsg::id() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.ImgXferMsg.id)
  return id_;
}
void ImgXferMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:imgxfer.proto.ImgXferMsg.id)
}

// optional uint32 ack_value = 3;
bool ImgXferMsg::has_ack_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImgXferMsg::set_has_ack_value() {
  _has_bits_[0] |= 0x00000004u;
}
void ImgXferMsg::clear_has_ack_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImgXferMsg::clear_ack_value() {
  ack_value_ = 0u;
  clear_has_ack_value();
}
::google::protobuf::uint32 ImgXferMsg::ack_value() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.ImgXferMsg.ack_value)
  return ack_value_;
}
void ImgXferMsg::set_ack_value(::google::protobuf::uint32 value) {
  set_has_ack_value();
  ack_value_ = value;
  // @@protoc_insertion_point(field_set:imgxfer.proto.ImgXferMsg.ack_value)
}

// optional .imgxfer.proto.UiControl ui = 4;
bool ImgXferMsg::has_ui() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImgXferMsg::set_has_ui() {
  _has_bits_[0] |= 0x00000008u;
}
void ImgXferMsg::clear_has_ui() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImgXferMsg::clear_ui() {
  if (ui_ != NULL) ui_->::imgxfer::proto::UiControl::Clear();
  clear_has_ui();
}
const ::imgxfer::proto::UiControl& ImgXferMsg::ui() const {
  // @@protoc_insertion_point(field_get:imgxfer.proto.ImgXferMsg.ui)
  return ui_ != NULL ? *ui_
                         : *::imgxfer::proto::UiControl::internal_default_instance();
}
::imgxfer::proto::UiControl* ImgXferMsg::mutable_ui() {
  set_has_ui();
  if (ui_ == NULL) {
    ui_ = new ::imgxfer::proto::UiControl;
  }
  // @@protoc_insertion_point(field_mutable:imgxfer.proto.ImgXferMsg.ui)
  return ui_;
}
::imgxfer::proto::UiControl* ImgXferMsg::release_ui() {
  // @@protoc_insertion_point(field_release:imgxfer.proto.ImgXferMsg.ui)
  clear_has_ui();
  ::imgxfer::proto::UiControl* temp = ui_;
  ui_ = NULL;
  return temp;
}
void ImgXferMsg::set_allocated_ui(::imgxfer::proto::UiControl* ui) {
  delete ui_;
  ui_ = ui;
  if (ui) {
    set_has_ui();
  } else {
    clear_has_ui();
  }
  // @@protoc_insertion_point(field_set_allocated:imgxfer.proto.ImgXferMsg.ui)
}

inline const ImgXferMsg* ImgXferMsg::internal_default_instance() {
  return &ImgXferMsg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace imgxfer

// @@protoc_insertion_point(global_scope)
